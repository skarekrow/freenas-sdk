{"version":3,"sources":["app/jsx/views/Dashboard.jsx"],"names":[],"mappings":"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","file":"app/jsx/views/Dashboard.jsx","sourcesContent":["// Dashboard\n// =========\n// Default view for FreeNAS, shows overview of system and other general\n// information.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\n\nimport ServicesMiddleware from \"../middleware/ServicesMiddleware\";\nimport ServicesStore from \"../stores/ServicesStore\";\n\nimport MemoryUtil from \"../components/Widgets/MemoryUtil\";\nimport CpuUtil from \"../components/Widgets/CpuUtil\";\nimport SystemInfo from \"../components/Widgets/SystemInfo\";\nimport SystemLoad from \"../components/Widgets/SystemLoad\";\nimport NetworkUsage from \"../components/Widgets/NetworkUsage\";\nimport DiskUsage from \"../components/Widgets/DiskUsage\";\n\nvar generateUUID = function () {\n  var rawUUID = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"\n  return rawUUID.replace( /[xy]/g, function ( c ) {\n    var r = Math.random() * 16 | 0;\n    var v = ( c === \"x\" ) ? r : ( r & 0x3 | 0x8 );\n\n    return v.toString( 16 );\n  }\n  );\n};\n\nconst widgetSizes =\n  {   \"xs-square\" : [ 75, 75 ]\n    , \"xs-rect\"   : [ 165, 75 ]\n    , \"s-square\"  : [ 165, 165 ]\n    , \"s-rect\"    : [ 255, 165 ]\n    , \"sl-rect\"   : [ 345, 165 ]\n    , \"m-square\"  : [ 255, 255 ]\n    , \"m-rect\"    : [ 345, 255 ]\n    , \"ml-rect\"   : [ 435, 255 ]\n    , \"l-square\"  : [ 345, 345 ]\n    , \"l-rect\"    : [ 525, 345 ]\n    , \"xl-rect\"   : [ 705, 525 ]\n  };\n\n\nconst Dashboard = React.createClass({\n\n  getDefaultProps: function () {\n      return {\n        // The size of each grid unit in pixels.\n        gridSize   : 15\n        // The amount of padding in grid units that should be in between any\n        // two adjacent widgets.\n        , gridGutter : 1\n      };\n    }\n\n  , getInitialState: function () {\n      return {\n        servicesList: ServicesStore.getAllServices()\n        , movementMode : false\n        , widgets      : {\n          SystemInfo   : {\n            id           : generateUUID()\n            , dimensions : widgetSizes[\"m-rect\"]\n          }\n          , MemoryUtil  : {\n            id           : generateUUID()\n            , dimensions : widgetSizes[\"m-rect\"]\n          }\n          , CpuUtil     : {\n            id           : generateUUID()\n            , dimensions : widgetSizes[\"m-rect\"]\n          }\n          , SystemLoad  : {\n            id           : generateUUID()\n            , dimensions : widgetSizes[\"m-rect\"]\n          }\n          , NetworkUsage: {\n            id           : generateUUID()\n            , dimensions : widgetSizes[\"l-rect\"]\n          }\n          , DiskUsage   : {\n            id           : generateUUID()\n            , dimensions : widgetSizes[\"l-rect\"]\n          }\n        }\n      };\n    }\n\n  , componentDidMount: function () {\n      ServicesMiddleware.requestServicesList();\n      ServicesStore.addChangeListener( this.handleServicesChange );\n      window.addEventListener( \"mouseup\", this.exitMovementMode );\n      window.addEventListener( \"resize\", this.handleResize );\n      this.initializeWidgets();\n      this.setState({\n        gridWidth: this.calculateGridWidth()\n      });\n    }\n\n  , componentWillUnmount: function () {\n      ServicesStore.removeChangeListener( this.handleServicesChange );\n      window.removeEventListener( \"mouseup\", this.exitMovementMode );\n      window.removeEventListener( \"resize', this.handleResize\" );\n    }\n\n  , handleServicesChange: function () {\n      this.setState({\n        servicesList: ServicesStore.getAllServices()\n      });\n    }\n\n  , handleResize: function () {\n    this.setState({\n      gridWidth : this.calculateGridWidth()\n    });\n    this.initializeWidgets();\n\n  }\n\n  // Calculate how many grid units will fit in the window.\n  , calculateGridWidth: function () {\n      return this.toGridUnits( this.getDOMNode( \"thePlayground\" ).offsetWidth );\n    }\n\n  // Converts pixels to grid units. Rounds down.\n  , toGridUnits: function ( pixels ) {\n      return Math.round( parseInt( pixels ) / this.props.gridSize );\n    }\n\n  // Converts grid units to pixels.\n  , toPixels: function ( gridUnits ) {\n      return gridUnits * this.props.gridSize;\n    }\n\n  // Begin moving a widget around. Records the id of the moving widget\n  // and its starting location.\n\n  , enterMovementMode: function ( id, event ) {\n      console.log( id );\n      console.log( event );\n      this.setState({\n        movementMode   : true\n        , widgetInMotion : {\n          id     : id\n          , origin : [ event.nativeEvent.clientX, event.nativeEvent.clientY ]\n        }\n      });\n    }\n\n  , calculateMovement: function ( event ) {\n      if ( this.state.movementMode ) {\n        var newPos = [];\n        var wim    = this.state.widgetInMotion;\n\n\n        _.forEach( this.state.widgets, function ( widgt ) {\n          if ( widgt.id === wim.id ) {\n            newPos.push.apply( newPos, widgt.position );\n          }\n        });\n\n        newPos[1] =\n          this.toPixels(\n            newPos[1] +\n            this.toGridUnits( event.nativeEvent.clientY - wim.origin[1] )\n          ) + \"px\";\n        newPos[0] =\n          this.toPixels(\n            newPos[0] +\n            this.toGridUnits( event.nativeEvent.clientX - wim.origin[0] )\n          ) + \"px\";\n\n        console.log( newPos );\n        console.log( this.refs );\n\n        this.moveWidget( this.refs[ \"widget-\" + wim.id ].getDOMNode(), newPos );\n      }\n    }\n\n  // When a widget is released from movement, change its location and move any\n  // overlapping widgets out of the way.\n  , exitMovementMode: function () {\n      var movedWidget = document.querySelector( \".widget.in-motion\" );\n      var newState    = {};\n\n      if ( movedWidget ) {\n        var newPosition   = [ this.toGridUnits( movedWidget.style.left )\n                            , this.toGridUnits( movedWidget.style.top )\n                            ];\n        var displayMatrix = _.clone( this.state.displayMatrix );\n        var widgetMeta    = this.state.widgetMeta;\n        var intersections;\n\n        // Fill the moved widget's old spot with zeroes\n        this.createMatrixFootprint(\n            displayMatrix\n          , widgetMeta[ this.state.widgetInMotion[\"id\"] ][\"pos\"]\n          , widgetMeta[ this.state.widgetInMotion[\"id\"] ][\"size\"]\n          , 0\n        );\n\n        intersections = this.findIntersections(\n            displayMatrix\n          , newPosition\n          , widgetMeta[ this.state.widgetInMotion[\"id\"] ][\"size\"]\n        );\n\n        // Zero out the positions of the intersecting widgets\n        for ( var i = 0; i < intersections.length; i++ ) {\n          this.createMatrixFootprint(\n              displayMatrix\n            , widgetMeta[ intersections[i] ][\"pos\"]\n            , widgetMeta[ intersections[i] ][\"size\"]\n            , 0\n          );\n        }\n\n        // Identify and assign the new widget position\n        widgetMeta[ this.state.widgetInMotion[\"id\"] ][\"pos\"] = newPosition;\n        this.createMatrixFootprint(\n            displayMatrix\n          , newPosition\n          , widgetMeta[ this.state.widgetInMotion[\"id\"] ][\"size\"]\n          , this.state.widgetInMotion[\"id\"]\n        );\n\n        // Re-home the intersecting widgets\n        for ( var i = 0; i < intersections.length; i++ ) {\n          var newPos = this.findEmptySpace(\n              displayMatrix\n            , widgetMeta[ intersections[i] ][\"size\"]\n          );\n\n          widgetMeta[ intersections[i] ][\"pos\"] = newPos;\n\n          this.moveWidget(\n              this.refs[ \"widget-\" + intersections[i] ].getDOMNode()\n            , [ this.toPixels( newPos[0] ) + \"px\"\n              , this.toPixels( newPos[1] ) + \"px\" ]\n            , 350\n          );\n          this.createMatrixFootprint(\n              displayMatrix\n            , widgetMeta[ intersections[i] ][\"pos\"]\n            , widgetMeta[ intersections[i] ][\"size\"]\n            , intersections[i]\n          );\n        }\n\n        newState[\"displayMatrix\"] = displayMatrix;\n        newState[\"widgetMeta\"]    = widgetMeta;\n      }\n\n      newState[\"movementMode\"]   = false;\n      newState[\"widgetInMotion\"] = null;\n\n      this.setState( newState );\n    }\n\n  // Animation for widget movement.\n  , moveWidget: function ( widgetElement, newPos, duration ) {\n      console.log( widgetElement );\n      Velocity(\n          widgetElement\n        , {\n          left   : newPos[0]\n          , top  : newPos[1]\n        }\n        , {\n          easing     : [ 0, 0.77, 0.47, 0.99 ]\n          , duration : duration ? duration : 50\n          , queue    : false\n        });\n    }\n\n  // Add more space to the bottom of the grid. Used when a widget doesn't fit.\n  , addEmptyRows: function ( displayMatrix, rows ) {\n      for ( var i = 0; i < rows; i++ ) {\n        displayMatrix.push( _.fill( Array( displayMatrix[0].length ), 0 ) );\n      }\n    }\n\n  // Finds the first [x, y] position in the widget grid large enough to fit\n  // a widget of the submitted size. Check is performed from left to right and\n  // top to bottom.\n  , findEmptySpace: function ( displayMatrix, dimensions ) {\n      var newPos;\n      var candidatePositions = [];\n\n      // Check each existing row for a fit\n      for ( var i = 0; i < displayMatrix.length; i++ ) {\n        var candidateIndexes = [];\n\n        // Check each y index in the row to test (in this order) that it:\n        // 1. Is empty\n        // 2. Is not too close to the end of the array for the widget to fit\n        // 3. Is followed by sufficient empty space for the widget to fit\n        for ( var j = 0; j < displayMatrix[i].length; j++ ) {\n          if (\n            displayMatrix[i][j] === 0 &&\n            typeof displayMatrix[i][ j +\n                                     dimensions[0] +\n                                     this.props.gridGutter ] !== \"undefined\" &&\n            _.every( displayMatrix[i]\n             .slice( j\n                    , j + dimensions[0] + this.props.gridGutter )\n                    , function ( val ) { return val === 0; } )\n          ) {\n            // If all the condtions are met, push this index as a candidate.\n            candidateIndexes.push( j );\n          }\n        }\n\n        // If any candidates were found, push the array of candidates in this\n        // row to the two-dimensional array of candidate positions.\n        if ( candidateIndexes.length ) {\n          candidatePositions.push( candidateIndexes );\n        // If no candidates were found, push null to to the array of rows.\n        // This makes it much easier to tell when a position is inviable during\n        // the y-axis check.\n        } else {\n          candidatePositions.push( null );\n        }\n      }\n\n      // Check if there's a suitable space by checking for x indicies that are\n      // in sufficient subsequent rows.\n      for ( var k = 0; k < candidatePositions.length; k++ ) {\n        // Only check for shared candidate x indicies within the height needed\n        // for the widget.\n        var candidateRange = candidatePositions\n                            .slice( k\n                                    , k + dimensions[1]\n                                        + this.props.gridGutter );\n        var winners;\n\n        // Make sure there are any candidate x indicies in this row to test.\n        if ( _.isArray( candidatePositions[k] ) ) {\n          // Only check for qualifying rows\n          // if there are no null rows in the range\n          if ( _.every( candidateRange, function ( entry ) {\n            return _.isArray( entry );\n          } ) ) {\n            // If there's only one row with qualifiying indicies, you must be at\n            // the bottom of the grid. Identify the first qualifiying x-index on\n            // the bottom row as the winner. Extra vertical space is created\n            // later in the function.\n            if ( candidateRange.length === 1 ) {\n              winners = [ candidateRange[0][0] ];\n            // Find the x indicies that are in all the candidate rows. This\n            // indicates that the entire range of rows has enough space for a\n            // widget of this size.\n            } else {\n              winners = _.intersection.apply( this, candidateRange );\n            }\n          // If any rows in the range are not arrays (null), that means there's\n          // no space at all for this widget in that row. At this point, you can\n          // continue the loop with the next qualifying row, because this one\n          // is certain to fail.\n          } else {\n            continue;\n          }\n\n          // If the intersection above produced any results, we have a winner.\n          if ( winners.length ) {\n            // It's possible for a winner to be too close to the bottom of the\n            // grid to fit. In this case, add extra space.\n            this.addEmptyRows( displayMatrix\n                               , Math.max( 0\n                                           , dimensions[1]\n                                             + this.props.gridGutter\n                                             - candidateRange.length ) );\n            // Identify the actual new position as the first x-index in the\n            // array of vertical intersections and leave the loop.\n            newPos = [ winners[0], k ];\n            break;\n          // If the array of intersections was empty, there is not enough\n          // vertical space in the candidate rows for this widget. Check for\n          // candidates starting with the next row.\n          } else {\n            continue;\n          }\n        // If the reason there are no candidate x indicies to test in this row\n        // is that there is no available space anywhere in the grid, add enough\n        // rows to the grid to fit the entire widget and give the top left\n        // coordinate of the new space as the new position.\n        } else if ( candidatePositions.length - 1 === k ) {\n          this.addEmptyRows( displayMatrix\n                             , dimensions[1] + this.props.gridGutter );\n          newPos = [ 0, candidatePositions.length ];\n          break;\n        // If the row is empty but not past the end of the grid,\n        // try another row.\n        } else {\n          continue;\n        }\n      }\n\n      return newPos;\n    }\n\n  // Find the positions where a widget of the specified position and\n  // dimensions would intersect with another widget or its gutter.\n  , findIntersections: function ( displayMatrix, position, dimensions ) {\n      var intersections = [];\n\n      for ( var i = position[1];\n            i < position[1] + dimensions[1] + this.props.gridGutter;\n            i++ ) {\n        intersections.push( displayMatrix[i]\n                            .slice( position[0]\n                                    , position[0]\n                                      + dimensions[0]\n                                      + this.props.gridGutter ) );\n      }\n\n      return _.without( _.uniq( _.flattenDeep( intersections ) ), 0 );\n    }\n\n  , createMatrixFootprint: function ( displayMatrix\n                                      , position\n                                      , dimensions\n                                      , fillEntry ) {\n    for ( var i = position[1];\n          i < position[1] + dimensions[1] + this.props.gridGutter;\n          i++ ) {\n      _.fill( displayMatrix[i]\n              , fillEntry\n              , position[0]\n              , position[0] + dimensions[0] + this.props.gridGutter );\n    }\n  }\n\n  // Used when a new set of widgets is requested to create random widgets and\n  // distribute them around the page as necessary.\n  , initializeWidgets: function () {\n      var widgets               = this.state.widgets;\n      var toGridUnits           = this.toGridUnits;\n      var toPixels              = this.toPixels;\n      var findEmptySpace        = this.findEmptySpace;\n      var createMatrixFootprint = this.createMatrixFootprint;\n      // The displayMatrix is a two-dimensional array in which empty positions\n      // are represented as zeros and occupied ones are set to the UUID of the\n      // widget occupying that space.\n      var displayMatrix = [ _.fill( Array( this.calculateGridWidth() ), 0 ) ];\n\n      _.forEach( widgets, function ( widget ) {\n        var dimensions = [ toGridUnits( widget.dimensions[0] )\n                           , toGridUnits( widget.dimensions[1] )\n                         ];\n        var position   = findEmptySpace( displayMatrix, dimensions );\n\n        createMatrixFootprint( displayMatrix, position, dimensions, widget.id );\n\n        widget.position    = [];\n        widget.position[0] = toPixels( position[0] );\n        widget.position[1] = toPixels( position[1] );\n      });\n\n      this.setState({\n        widgets       : widgets\n        , displayMatrix : displayMatrix\n      });\n    }\n\n  // TODO:\n  // Maybe this should be moved into some kind of utility class, and generalized\n  , isServiceRunning: function ( service ) {\n      return ( _.findIndex( this.state.servicesList\n                            , { name: service, state: \"running\" } ) > -1 );\n    }\n\n  , render: function () {\n      if ( this.isServiceRunning( \"collectd\" ) === true ) {\n        return (\n            <main\n              ref         = \"thePlayground\"\n              onMouseMove = { this.calculateMovement }\n              className   = { \"playground grid-on\" } >\n              <div\n                ref       = \"widgetAreaRef\"\n                className = \"widget-wrapper\" >\n                <SystemInfo\n                  stacked           = \"true\"\n                  title             = \"System Info\"\n                  size              = \"m-rect\"\n                  inMotion          = { ( ( this.state.movementMode &&\n                                            this.state.widgetInMotion &&\n                                            this.state.widgetInMotion.id ===\n                                            this.state.widgets.SystemInfo.id )\n                                                        ? true\n                                                        : false ) }\n                  onMouseDownHolder = { this.enterMovementMode\n                                        .bind( this\n                                              , this.state.\n                                                widgets.SystemInfo.id ) }\n                  refHolder         = { \"widget-\"\n                                        + this.state.widgets.SystemInfo.id }\n                  dimensions        = { this.state.widgets\n                                        .SystemInfo.dimensions }\n                  position          = { this.state.widgets.SystemInfo.position }\n                  id                = { this.state.widgets.SystemInfo.id }  />\n                <MemoryUtil\n                  title = \"Memory Value\"\n                  size  = \"m-rect\"\n                  dimensions  = { this.state.widgets.MemoryUtil.dimensions }\n                  position    = { this.state.widgets.MemoryUtil.position }\n                  id          = { this.state.widgets.MemoryUtil.id }  />\n                <CpuUtil\n                  primary = \"pie\"\n                  title = \"CPU utilization\"\n                  size  = \"m-rect\"\n                  dimensions  = { this.state.widgets.CpuUtil.dimensions }\n                  position    = { this.state.widgets.CpuUtil.position }\n                  id          = { this.state.widgets.CpuUtil.id }  />\n                <SystemLoad\n                  primary   = \"stacked\"\n                  title     = \"System Load\"\n                  size      = \"m-rect\"\n                  dimensions  = { this.state.widgets.SystemLoad.dimensions }\n                  position    = { this.state.widgets.SystemLoad.position }\n                  id          = { this.state.widgets.SystemLoad.id }  />\n                <NetworkUsage\n                  title = \"Network Usage\"\n                  size  = \"l-rect\"\n                  graphType = \"line\"\n                  dimensions  = { this.state.widgets.NetworkUsage.dimensions }\n                  position    = { this.state.widgets.NetworkUsage.position }\n                  id          = { this.state.widgets.NetworkUsage.id }  />\n                <DiskUsage\n                  title = \"Disk Usage\"\n                  size  = \"l-rect\"\n                  graphType = \"line\"\n                  dimensions  = { this.state.widgets.DiskUsage.dimensions }\n                  position    = { this.state.widgets.DiskUsage.position }\n                  id          = { this.state.widgets.DiskUsage.id }  />\n              </div>\n          </main>\n        );\n      } else {\n        return (\n          <main>\n            <h2>Dashboard View</h2>\n            <h3>Please enable collectd service to display widgets.</h3>\n          </main>\n        );\n      }\n    }\n\n});\n\nexport default Dashboard;\n"]}
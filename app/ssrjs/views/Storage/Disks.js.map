{"version":3,"sources":["app/jsx/views/Storage/Disks.jsx"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;;;;;qBAEK,OAAO;;;;8BAEJ,uBAAuB;;;;gCACzB,yBAAyB;;;;gCAE7B,yBAAyB;;;;yCACzB,kCAAkC;;;;AAEjD,SAAS,iBAAiB,GAAI;AAC5B,SAAO,EAAE,KAAK,EAAE,8BAAG,WAAW,EAAE,EAAE,CAAC;CACpC;;AAED,IAAM,KAAK,GAAG,mBAAM,WAAW,CAE7B;;AAAE,iBAAe,EAAE,2BAAY;AAC3B,WAAO,EAAE,UAAU,EAAG,EAAE;AACf,WAAK,EAAQ,iBAAiB,EAAE;KACjC,CAAC;GACV;;AAED,mBAAiB,EAAE,6BAAY;AAC7B,kCAAG,iBAAiB,CAAE,IAAI,CAAC,iBAAiB,CAAE,CAAC;AAC/C,2CAAG,oBAAoB,EAAE,CAAC;AAC1B,2CAAG,SAAS,CAAE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAE,CAAC;GAC9C;;AAED,sBAAoB,EAAE,gCAAY;AAChC,kCAAG,oBAAoB,CAAE,IAAI,CAAC,iBAAiB,CAAE,CAAC;AAClD,2CAAG,WAAW,CAAE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAE,CAAC;GAChD;;AAED,mBAAiB,EAAE,6BAAY;AAC7B,QAAI,CAAC,QAAQ,CAAE,iBAAiB,EAAE,CAAE,CAAC;GACtC;;AAED,mBAAiB,EAAE,2BAAW,KAAK,EAAG;AACpC,QAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;GAClD;;AAED,QAAM,EAAE,kBAAY;AAClB,QAAI,MAAM,GAAG,4BAAS,aAAa,CAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAE,CAAC;;AAE7D,WACE;;;MACE,4CAAO,QAAQ,EAAK,IAAI,CAAC,iBAAiB,AAAE;AACrC,aAAK,EAAQ,IAAI,CAAC,KAAK,CAAC,UAAU,AAAE,GAAG;MAC9C;;;QAAM,4BAAS,QAAQ,CAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAE;OAAO;KACjD,CACN;GACH;;CAEF,CAEF,CAAC;;qBAEa,KAAK","file":"app/jsx/views/Storage/Disks.jsx","sourcesContent":["// DISKS VIEW\n// ==========\n// Overview of all the hard disks in your FreeNAS system.\n\n\"use strict\";\n\nimport React from \"react\";\n\nimport ByteCalc from \"../../common/ByteCalc\";\nimport Viewer from \"../../components/Viewer\";\n\nimport DS from \"../../stores/DisksStore\";\nimport DM from \"../../middleware/DisksMiddleware\";\n\nfunction getDisksFromStore () {\n  return { disks: DS.getAllDisks() };\n}\n\nconst Disks = React.createClass(\n\n  { getInitialState: function () {\n      return { inputValue : \"\"\n             , disks      : getDisksFromStore()\n             };\n    }\n\n  , componentDidMount: function () {\n      DS.addChangeListener( this.handleDisksChange );\n      DM.requestDisksOverview();\n      DM.subscribe( this.constructor.displayName );\n    }\n\n  , componentWillUnmount: function () {\n      DS.removeChangeListener( this.handleDisksChange );\n      DM.unsubscribe( this.constructor.displayName );\n    }\n\n  , handleDisksChange: function () {\n      this.setState( getDisksFromStore() );\n    }\n\n  , handleInputChange: function ( event ) {\n      this.setState({ inputValue: event.target.value })\n    }\n\n  , render: function () {\n      let output = ByteCalc.convertString( this.state.inputValue );\n\n      return (\n        <div>\n          <input onChange = { this.handleInputChange }\n                 value    = { this.state.inputValue } />\n          <h1>{ ByteCalc.humanize( output, false, true ) }</h1>\n        </div>\n      );\n    }\n\n  }\n\n);\n\nexport default Disks;\n"]}
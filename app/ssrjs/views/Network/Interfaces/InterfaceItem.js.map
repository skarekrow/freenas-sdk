{"version":3,"sources":["app/jsx/views/Network/Interfaces/InterfaceItem.jsx"],"names":[],"mappings":"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","file":"app/jsx/views/Network/Interfaces/InterfaceItem.jsx","sourcesContent":["// Interface Item\n// ==============\n// Handles viewing and and changing of network interfaces.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\nimport TWBS from \"react-bootstrap\";\n\nimport routerShim from \"../../../components/mixins/routerShim\";\nimport clientStatus from \"../../../components/mixins/clientStatus\";\n\nimport viewerUtil from \"../../../components/Viewer/viewerUtil\";\n\nimport IS from \"../../../stores/InterfacesStore\";\n\nimport Icon from \"../../../components/Icon\";\n\nimport InterfaceEdit from \"./InterfaceEdit\";\n\nconst InterfaceView = React.createClass({\n\n  propTypes: {\n    item: React.PropTypes.object.isRequired\n  }\n\n  // Map an array of aliases into an array of ListGroupItems representing all\n  // aliases of 'family' (ie INET, INET6). Not providing a family will  map all\n  // the aliases.\n  , createAliasDisplayList: function ( family ) {\n    let aliasDisplayItems = null;\n\n    // Only do anything if the interface exists and there are any aliases.\n    // The first check should never fail, but I've said that before and\n    // regretted it.\n    if ( !_.isEmpty( this.props.item )\n      && !_.isEmpty( this.props.item.status ) ) {\n      aliasDisplayItems =\n        _.map( this.props.item.status.aliases\n             , function mapAliasesToList ( alias, key ) {\n\n               // Only return items for aliases matching the given family.\n               if ( family === \"INET\" && alias.family === \"INET\" ) {\n                 return ( this.createAliasDisplayItem( alias ) );\n               } else if ( family === \"INET6\" && alias.family === \"INET6\" ) {\n                 return ( this.createAliasDisplayItem( alias ) );\n               // If no family was specified or the family was unrecognized,\n               // create a list item for every alias. This item is different\n               // because we can't make certain assumptions.\n               } else if ( family !== \"INET\" && family !== \"INET6\" ) {\n                 return (\n                   <TWBS.ListGroupItem>\n                     { \"Link Type: \" + family }\n                     <br />\n                     <br />\n                     { \"Address: \" }\n                     <br />\n                     <strong>{ alias.address }</strong>\n                   </TWBS.ListGroupItem>\n                 )\n               }\n             }\n             , this )\n      return ( _.compact( aliasDisplayItems ) )\n    } else {\n      return null;\n    }\n\n  }\n\n  // Create the individual items for createAliasDisplayList.\n  , createAliasDisplayItem: function ( alias ) {\n    return (\n      <TWBS.ListGroupItem className = \"aliasDisplayItem\">\n        <span className = \"aliasItemIP\">\n          <strong>{ alias.address }</strong>\n        </span>\n        <span className = \"aliasItemNetmask\">\n          <em>{ \"/\" + alias.netmask\n              + \" (\" + alias.broadcast\n              + \")\" }\n          </em>\n        </span>\n      </TWBS.ListGroupItem>\n    )\n  }\n\n  , render: function () {\n\n    let configureButton = (\n      <TWBS.Row>\n        <TWBS.Col xs={12}>\n          <TWBS.Button\n            className = \"pull-right\"\n            onClick = { this.props.handleViewChange.bind( null, \"edit\" ) }\n            bsStyle = \"primary\">\n            {\"Configure Interface\"}\n          </TWBS.Button>\n        </TWBS.Col>\n      </TWBS.Row>\n    );\n\n    let interfaceName = (\n      <TWBS.Panel>\n        { \"Interface Name: \" }\n        <strong>{ this.props.item[ \"name\" ] }</strong>\n      </TWBS.Panel>\n    );\n\n    let linkState = (\n      <TWBS.Panel>\n        { \"Link State: \" }\n        <strong>{ this.props.item[ \"link_state\" ] }</strong>\n      </TWBS.Panel>\n    );\n\n    let dhcpConfigured = (\n      <TWBS.Panel>\n        { \"DHCP Configured: \" }\n        <Icon glyph = { this.props.item[ \"dhcp\" ]\n                      ? \"check text-primary\"\n                      : \"times text-muted\"\n                      } />\n      </TWBS.Panel>\n    )\n\n    let interfaceType = (\n      <TWBS.Panel>\n        { \"Interface Type: \" }\n        <strong>{ this.props.item[ \"type\" ] }</strong>\n      </TWBS.Panel>\n    )\n\n    return (\n      <TWBS.Grid fluid>\n        { configureButton }\n        <TWBS.Row>\n          <TWBS.Col xs = {6}>\n            { interfaceName }\n          </TWBS.Col>\n          <TWBS.Col xs = {6}>\n            { linkState }\n          </TWBS.Col>\n        </TWBS.Row>\n        <TWBS.Row>\n          <TWBS.Col xs = {6}>\n            { dhcpConfigured }\n          </TWBS.Col>\n          <TWBS.Col xs = {6}>\n            { interfaceType }\n          </TWBS.Col>\n        </TWBS.Row>\n        <TWBS.Row>\n          <TWBS.Col xs = {6} >\n            <h4>{ \"IPv4 Aliases\" }</h4>\n            <TWBS.PanelGroup>\n\n              <TWBS.Panel>\n                <TWBS.ListGroup fill className =\"aliasDisplayList\">\n                  { this.createAliasDisplayList( \"INET\" ) }\n                </TWBS.ListGroup>\n              </TWBS.Panel>\n            </TWBS.PanelGroup>\n          </TWBS.Col>\n          <TWBS.Col xs = {6} >\n            <h4>{ \"IPv6 Aliases\" }</h4>\n            <TWBS.PanelGroup>\n              <TWBS.Panel>\n                <TWBS.ListGroup fill className =\"aliasDisplayList\">\n                  { this.createAliasDisplayList( \"INET6\" ) }\n                </TWBS.ListGroup>\n              </TWBS.Panel>\n            </TWBS.PanelGroup>\n          </TWBS.Col>\n        </TWBS.Row>\n      </TWBS.Grid>\n    );\n  }\n\n});\n\nconst InterfaceItem = React.createClass({\n\n  propTypes: {\n    viewData: React.PropTypes.object.isRequired\n  }\n\n  , mixins: [ routerShim, clientStatus ]\n\n  , getInitialState: function () {\n      return {\n        targetInterface: this.getInterfaceFromStore()\n        , currentMode: \"view\"\n        , activeRoute: this.getDynamicRoute()\n      };\n    }\n\n  , componentDidUpdate: function ( prevProps, prevState ) {\n      var activeRoute = this.getDynamicRoute();\n\n      if ( activeRoute !== prevState.activeRoute ) {\n        this.setState({\n          targetInterface: this.getInterfaceFromStore()\n          , currentMode: \"view\"\n          , activeRoute: activeRoute\n        });\n      }\n    }\n\n  , componentDidMount: function () {\n      IS.addChangeListener( this.updateInterfaceInState );\n    }\n\n  , componentWillUnmount: function () {\n      IS.removeChangeListener( this.updateInterfaceInState );\n    }\n\n  , getInterfaceFromStore: function () {\n      let format = this.props.viewData.format;\n      return IS.findInterfaceByKeyValue( format[\"selectionKey\"]\n                                       , this.getDynamicRoute() );\n    }\n\n  , updateInterfaceInState: function () {\n      this.setState({ targetInterface: this.getInterfaceFromStore() });\n    }\n\n  , handleViewChange: function ( nextMode, event ) {\n      this.setState({ currentMode: nextMode });\n    }\n\n  , render: function () {\n    let DisplayComponent = null;\n\n    if ( this.state.SESSION_AUTHENTICATED && this.state.targetInterface ) {\n      var childProps = {\n        handleViewChange: this.handleViewChange\n        , item: this.state.targetInterface\n        , viewData: this.props.viewData\n      };\n\n      switch ( this.state.currentMode ) {\n        default:\n        case \"view\":\n          DisplayComponent = <InterfaceView {...childProps} />;\n          break;\n        case \"edit\":\n          DisplayComponent = <InterfaceEdit {...childProps} />;\n          break;\n      }\n    }\n\n    return (\n      <div className=\"viewer-item-info\">\n\n      { DisplayComponent }\n\n    </div>\n    );\n  }\n\n});\n\nexport default InterfaceItem;\n"]}
{"version":3,"sources":["app/jsx/views/Network/Interfaces/InterfaceEdit.jsx"],"names":[],"mappings":"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","file":"app/jsx/views/Network/Interfaces/InterfaceEdit.jsx","sourcesContent":["// Interface Edit View\n// ===================\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\nimport TWBS from \"react-bootstrap\";\n\nimport viewerCommon from \"../../../components/mixins/viewerCommon\";\nimport inputHelpers from \"../../../components/mixins/inputHelpers\";\n\nimport IM from \"../../../middleware/InterfacesMiddleware\";\n\nconst InterfaceEdit = React.createClass({\n\n  mixins: [ viewerCommon\n          , inputHelpers\n          ]\n\n  , contextTypes: { router: React.PropTypes.func }\n\n  , propTypes: { item: React.PropTypes.object.isRequired\n               , viewData: React.PropTypes.object.isRequired\n               }\n\n  , getInitialState: function () {\n    let remoteState = this.setRemoteState( this.props );\n\n    return { locallyModifiedValues : {}\n           , remotelyModifiedValues: {}\n           , remoteState: remoteState\n           , mixedValues: this.props.item\n           , lastSentValues: {}\n           }\n  }\n\n  // Initially copied from UserEdit.\n  // TODO: Eliminate this duplication if at all possible.\n  , componentWillReceiveProps: function ( nextProps ) {\n    let newRemoteModified  = {};\n    let newLocallyModified = {};\n    let dataKeys = nextProps.viewData[ \"format\" ][ \"dataKeys\" ];\n\n    // remotelyModifiedValues represents everything that's changed remotely\n    // since the view was opened. This is the difference between the newly\n    // arriving props and the initial ones. Read-only and unknown values are\n    // ignored.\n    // TODO: Use this to show alerts for remote changes on sections the local\n    // administrator is working on.\n    let mismatchedRemoteFields =\n      _.pick( nextProps.item\n        , function checkMatch ( value, key ) {\n          return _.isEqual( this.state.remoteState[ key ]\n                          , value );\n        }\n        , this\n        );\n\n    newRemoteModified = this.removeReadOnlyFields( mismatchedRemoteFields\n                                                 , dataKeys\n                                                 );\n\n    // remoteState records the item as it was when the view was first\n    // opened. This is used to mark changes that have occurred remotely since\n    // the user began editing.\n    // It is important to know if the incoming change resulted from a call\n    // made by the local administrator. When this happens, we reset the\n    // remoteState to get rid of remote edit markers, as the local version\n    // has thus become authoritative.\n    // We check this by comparing the incoming changes (newRemoteModified) to\n    // the last request sent (this.state.lastSentValues). If this check\n    // succeeds, we reset newLocallyModified and newRemoteModified, as there are\n    // no longer any remote or local changes to record.\n    // TODO: Do this in a deterministic way, instead of relying on comparing\n    // values.\n    if ( _.isEqual( this.state.lastSentValues, newRemoteModified ) ) {\n      newRemoteModified  = {};\n      newLocallyModified = {};\n      this.setState( { remoteState: this.setRemoteState( nextProps )\n                     , locallyModifiedValues: newLocallyModified\n                     }\n                   );\n    }\n\n    this.setState( { remotelyModifiedValues: newRemoteModified } );\n  }\n\n  , submitInterfaceConfigureTask: function () {\n    // Don't let read-only values in.\n    let locallyModifiedValues = this.state.locallyModifiedValues;\n    let mixedValues = this.state.mixedValues;\n\n    let dataKeys = this.props.viewData[ \"format\" ][ \"dataKeys\" ];\n    let valuesToSend = this.removeReadOnlyFields( locallyModifiedValues\n                                                , dataKeys\n                                                );\n    console.log( \"valuesToSend\", valuesToSend );\n    if ( !_.isEmpty( valuesToSend ) ) {\n      IM.configureInterface( this.props.item[ \"name\" ]\n                           , valuesToSend\n                           , this.submissionRedirect( valuesToSend )\n                           );\n      this.setState({ lastSentValues: valuesToSend });\n    } else {\n      console.warn( \"Attempted to sent an Interface Configure task\"\n                  + \" with no valid fields\"\n                  );\n    }\n  }\n\n  , render: function () {\n    let locallyModifiedValues = this.state.locallyModifiedValues;\n    let mixedValues = this.state.mixedValues;\n\n    let nameValue = mixedValues[ \"name\" ]\n                  ? mixedValues[ \"name\" ]\n                  : \"\";\n\n    let mtuValue = mixedValues[ \"mtu\" ]\n                 ? mixedValues[ \"mtu\" ].toString()\n                 : \"\";\n\n    let editButtons =\n      <TWBS.ButtonToolbar>\n        {/*<TWBS.Button className = \"pull-left\"\n                        disabled = { this.props.item[\"builtin\"] }\n                        onClick = { this.deleteGroup }\n                        bsStyle = \"danger\" >\n             {\"Delete Interface\"}\n           </TWBS.Button>*/}\n          <TWBS.Button className = \"pull-right\"\n                       onClick = { this.props.handleViewChange.bind( null\n                                                                   , \"view\"\n                                                                   )\n                                 }\n                       bsStyle = \"default\" >\n            {\"Cancel\"}\n          </TWBS.Button>\n          <TWBS.Button className = \"pull-right\"\n                       disabled = { _.isEmpty( locallyModifiedValues )\n                                             ? true\n                                             : false }\n                       onClick = { this.submitInterfaceConfigureTask }\n                       bsStyle = \"info\" >{\"Save Changes\"}</TWBS.Button>\n      </TWBS.ButtonToolbar>;\n\n    let inputForm = <form className = \"form-horizontal\">\n      <TWBS.Grid fluid>\n        <TWBS.Row>\n          <TWBS.Col xs={12}>\n            {/* Interface Name */}\n            <TWBS.Input\n              type = \"text\"\n              label = \"Interface Name\"\n              value = { nameValue }\n              onChange = { this.editHandleValueChange.bind( null, \"name\" ) }\n              ref = { \"name\" }\n              key = { \"name\" }\n              groupClassName = { _.has( locallyModifiedValues[ \"name\" ]\n                                      ? \"editorWasModified\"\n                                      : \"\"\n                                      )\n                               }\n              labelClassName = \"col-xs-3\"\n              wrapperClassName = \"col-xs-9\"\n            />\n          {/* DHCP */}\n          <TWBS.Input\n            type = \"checkbox\"\n            label = \"DHCP Enabled\"\n            checked = { mixedValues[ \"dhcp\" ] }\n            onChange = { this.editHandleValueChange.bind( null, \"dhcp\" ) }\n            ref = { \"dhcp\" }\n            key = { \"dhcp\" }\n            groupClassName = { _.has( locallyModifiedValues[ \"dhcp\" ]\n                                    ? \"editorWasModified\"\n                                    : \"\"\n                                    )\n                             }\n            labelClassName = \"col-xs-3\"\n            wrapperClassName = \"col-xs-9\"\n          />\n          {/* enabled */}\n          <TWBS.Input\n            type = \"checkbox\"\n            label = \"Interface Enabled\"\n            checked = { mixedValues[ \"enabled\" ] }\n            onChange = { this.editHandleValueChange.bind( null, \"enabled\" ) }\n            ref = { \"enabled\" }\n            key = { \"enabled\" }\n            groupClassName = { _.has( locallyModifiedValues[ \"enabled\" ]\n                                    ? \"editorWasModified\"\n                                    : \"\"\n                                    )\n                             }\n            labelClassName = \"col-xs-3\"\n            wrapperClassName = \"col-xs-9\"\n          />\n          {/* MTU - Hidden until safe validation can be performed.*/}\n         {/*<TWBS.Input\n              type = \"text\"\n              label = \"MTU\"\n              value = { mtuValue }\n              onChange = { this.editHandleValueChange.bind( null, \"mtu\" ) }\n              ref = { \"mtu\" }\n              key = { \"mtu\" }\n              groupClassName = { _.has( locallyModifiedValues[ \"mtu\" ]\n                                      ? \"editorWasModified\"\n                                      : \"\"\n                                      )\n                               }\n              labelClassName = \"col-xs-3\"\n              wrapperClassName = \"col-xs-9\"\n            />*/}\n          </TWBS.Col>\n        </TWBS.Row>\n      </TWBS.Grid>\n    </form>\n\n    return (\n      <div className = \"container-fluid\" >\n        { editButtons }\n        { inputForm }\n      </div>\n    )\n\n  }\n\n});\n\nexport default InterfaceEdit;\n"]}
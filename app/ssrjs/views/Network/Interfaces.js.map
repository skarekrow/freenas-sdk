{"version":3,"sources":["app/jsx/views/Network/Interfaces.jsx"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;;;;;qBAIK,OAAO;;;;gCAEN,yBAAyB;;;;8CAEX,uCAAuC;;;;qCAE5C,8BAA8B;;;;AAR1D,IAAI,iBAAiB,GAAG,YAAY,CAAC;;AAUrC,IAAI,QAAQ,GAAG;AACb,QAAM,EAAE,OAAO,CAAE,uDAAuD,CAAE,CAAC,CAAC,CAAC;AAC3E,SAAO,EAAE,EAAE,KAAK,EAAG,mBAAmB;AAC3B,SAAK,EAAG,aAAa;GACtB;AACV,SAAO,EAAE,EAAE,cAAc,EACd,EAAE,SAAS,EACT,EAAE,IAAI,EAAE,sBAAsB;AAC5B,gBAAQ,EAAE,EAAE,UAAU,EAAE,eAAe,EAAE;OAC1C;AACD,kBAAY,EACZ,EAAE,IAAI,EAAE,yBAAyB;AAC/B,gBAAQ,EAAE,EAAE,UAAU,EAAE,iBAAiB,EAAE;OAC7C;AACA,aAAO,EACP,EAAE,IAAI,EAAE,+BAA+B;AACrC,gBAAQ,EAAE,EAAE,UAAU,EAAE,oBAAoB,EAAE;OAC/C;KACF;AACD,iBAAa,EAAE,kBAAkB;AACjC,iBAAa,EAAE,gBAAgB;AAC/B,kBAAc,EAAE,EAAG;AACnB,kBAAc,EAAE,EAAG;AACnB,iBAAa,EAAE,CAAE,WAAW,EACX,cAAc,EACd,SAAS,CAAE;AAC5B,iBAAa,EAAE,CAAE,WAAW,EACX,cAAc,EACd,SAAS,CAAE;AAC5B,oBAAgB,EAAE,CAAE,SAAS,CAAE;GACjC;CACZ,CAAC;;AAEF,SAAS,sBAAsB,GAAI;AACjC,SAAO,EAAE,cAAc,EAAE,mCAAgB,gBAAgB,EAAE,EAAE,CAAC;CAC/D;;AAED,IAAM,UAAU,GAAG,mBAAM,WAAW,CAAC;;;AAEnC,iBAAe,EAAE,2BAAY;AAC3B,WAAO,sBAAsB,EAAE,CAAC;GACjC;;AAEC,mBAAiB,EAAE,6BAAY;AAC/B,uCAAgB,iBAAiB,CAAE,IAAI,CAAC,sBAAsB,CAAE,CAAC;AACjE,gDAAqB,qBAAqB,EAAE,CAAC;AAC7C,gDAAqB,SAAS,CAAE,iBAAiB,CAAE,CAAC;GACrD;;AAEC,sBAAoB,EAAE,gCAAY;AAClC,uCAAgB,oBAAoB,CAAE,IAAI,CAAC,sBAAsB,CAAE,CAAC;AACpE,gDAAqB,WAAW,CAAE,iBAAiB,CAAE,CAAC;GACvD;;AAEC,wBAAsB,EAAE,kCAAY;AACpC,QAAI,CAAC,QAAQ,CAAE,sBAAsB,EAAE,CAAE,CAAC;GAC3C;;AAEC,QAAM,EAAE,kBAAY;AAClB,WAAO;AACE,YAAM,EAAK,YAAY,AAAE;AACzB,eAAS,EAAK,IAAI,CAAC,KAAK,CAAC,cAAc,AAAE;AACzC,cAAQ,EAAK,QAAQ,AAAE,GAAG,CAAC;GACrC;;CAEJ,CAAC,CAAC;;qBAEY,UAAU","file":"app/jsx/views/Network/Interfaces.jsx","sourcesContent":["// Interfaces\n// ==========\n\n\"use strict\";\n\nvar componentLongName = \"Interfaces\";\n\nimport React from \"react\";\n\nimport Viewer from \"../../components/Viewer\";\n\nimport InterfacesMiddleware from \"../../middleware/InterfacesMiddleware\";\n\nimport InterfacesStore from \"../../stores/InterfacesStore\";\n\nvar viewData = {\n  format: require( \"../../../data/middleware-keys/interfaces-display.json\" )[0]\n  , routing: { route : \"interfaces-editor\"\n             , param : \"interfaceID\"\n             }\n  , display: { filterCriteria:\n               { connected:\n                 { name: \"connected interfaces\"\n                 , testProp: { link_state: \"LINK_STATE_UP\" }\n                 }\n               , disconnected:\n                 { name: \"disconnected interfaces\"\n                 , testprop: { link_state: \"LINK_STATE_DOWN\" }\n                }\n               , unknown:\n                 { name: \"invalid or unknown interfaces\"\n                 , testprop: { link_state: \"LINK_STATE_UNKNOWN\" }\n                 }\n               }\n             , remainingName: \"other interfaces\"\n             , ungroupedName: \"all interfaces\"\n             , allowedFilters: [ ]\n             , defaultFilters: [ ]\n             , allowedGroups: [ \"connected\"\n                              , \"disconnected\"\n                              , \"unknown\" ]\n             , defaultGroups: [ \"connected\"\n                              , \"disconnected\"\n                              , \"unknown\" ]\n             , defaultCollapsed: [ \"unknown\" ]\n            }\n};\n\nfunction getInterfacesFromStore () {\n  return { interfacesList: InterfacesStore.getAllInterfaces() };\n}\n\nconst Interfaces = React.createClass({\n\n  getInitialState: function () {\n    return getInterfacesFromStore();\n  }\n\n  , componentDidMount: function () {\n    InterfacesStore.addChangeListener( this.handleInterfacesChange );\n    InterfacesMiddleware.requestInterfacesList();\n    InterfacesMiddleware.subscribe( componentLongName );\n  }\n\n  , componentWillUnmount: function () {\n    InterfacesStore.removeChangeListener( this.handleInterfacesChange );\n    InterfacesMiddleware.unsubscribe( componentLongName );\n  }\n\n  , handleInterfacesChange: function () {\n    this.setState( getInterfacesFromStore() );\n  }\n\n  , render: function () {\n      return <Viewer\n               header = { \"Interfaces\" }\n               inputData = { this.state.interfacesList }\n               viewData = { viewData } />;\n    }\n\n});\n\nexport default Interfaces;\n"]}
{"version":3,"sources":["app/jsx/views/Accounts/Groups/GroupItem.jsx"],"names":[],"mappings":"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","file":"app/jsx/views/Accounts/Groups/GroupItem.jsx","sourcesContent":["// Group Item Template\n// ==================\n// Handles the viewing and editing of individual group items. Shows a non-editable\n// overview of the group, and mode-switches to a more standard editor panel.\n// Group is set by providing a route parameter.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\nimport TWBS from \"react-bootstrap\";\n\nimport routerShim from \"../../../components/mixins/routerShim\";\nimport clientStatus from \"../../../components/mixins/clientStatus\";\n\nimport viewerUtil from \"../../../components/Viewer/viewerUtil\";\nimport editorUtil from \"../../../components/Viewer/Editor/editorUtil\";\n\nimport GroupsMiddleware from \"../../../middleware/GroupsMiddleware\";\nimport GroupsStore from \"../../../stores/GroupsStore\";\n\nimport UsersStore from \"../../../stores/UsersStore\";\n\nimport groupMixins from \"../../../components/mixins/groupMixins\";\nimport inputHelpers from \"../../../components/mixins/inputHelpers\";\nimport viewerCommon from \"../../../components/mixins/viewerCommon\";\n\nconst GroupView = React.createClass({\n\n    mixins: [   groupMixins\n              , viewerCommon ]\n\n  , contextTypes: {\n      router: React.PropTypes.func\n  }\n\n  , propTypes: {\n      item: React.PropTypes.object.isRequired\n    }\n\n  , getMembers: function( groupid ) {\n    if ( UsersStore.getUsersByGroup( groupid ) ) {\n      return UsersStore.getUsersByGroup( groupid );\n    } else {\n      return [];\n    }\n  }\n\n  , createUserDisplayList: function( groupid ) {\n      var listUserItemArray = [];\n      var users = this.getMembers( groupid );\n\n      for (var i = 0; i < users.length; i++) {\n         listUserItemArray.push(<TWBS.ListGroupItem>{ users[i].username }</TWBS.ListGroupItem>);\n      }\n\n      return listUserItemArray;\n  }\n\n  , render: function () {\n      var builtInGroupAlert = null;\n      var editButtons = null;\n\n      if ( this.props.item[\"builtin\"] ) {\n        builtInGroupAlert = (\n          <TWBS.Alert bsStyle   = \"info\"\n                      className = \"text-center\">\n            <b>{\"This is a built-in FreeNAS group.\"}</b>\n          </TWBS.Alert>\n        );\n      }\n\n      editButtons = (\n        <TWBS.ButtonToolbar>\n          <TWBS.Button className = \"pull-left\"\n                       disabled  = { this.props.item[\"builtin\"] }\n                       onClick   = { this.deleteGroup }\n                       bsStyle   = \"danger\" >{\"Delete Group\"}</TWBS.Button>\n          <TWBS.Button className = \"pull-right\"\n                       onClick   = { this.props.handleViewChange.bind(null, \"edit\") }\n                       bsStyle   = \"info\" >{\"Edit Group\"}</TWBS.Button>\n        </TWBS.ButtonToolbar>\n      );\n\n      return (\n        <TWBS.Grid fluid>\n        {/* \"Edit Group\" Button - Top */}\n        { editButtons }\n\n        <TWBS.Row>\n          <TWBS.Col xs={3}\n                    className=\"text-center\">\n            <viewerUtil.ItemIcon primaryString  = { this.props.item[\"name\"] }\n                                 fallbackString = { this.props.item[\"id\"] }\n                                 seedNumber     = { this.props.item[\"id\"] } />\n          </TWBS.Col>\n          <TWBS.Col xs={9}>\n            <h3>{ this.props.item[\"name\"] }</h3>\n            <hr />\n          </TWBS.Col>\n        </TWBS.Row>\n\n          {/* Shows a warning if the group account is built in */}\n          { builtInGroupAlert }\n\n          {/* Primary group data overview */}\n\n        <TWBS.Row>\n\t  <TWBS.Col xs      = {2}\n\t            className = \"text-muted\" >\n\t            <h4 className = \"text-muted\" >{ \"Group ID\" }</h4>\n\t  </TWBS.Col>\n          <TWBS.Col xs = {10}>\n\t\t    <h3>{this.props.item[\"id\"]}</h3>\n\t  </TWBS.Col>\n        </TWBS.Row>\n\t<TWBS.Row>\n\t  <TWBS.Col xs      = {12}\n\t            className = \"text-muted\" >\n\t            <h4 className = \"text-muted\" >{ \"Users\" }</h4>\n                       <TWBS.ListGroup>\n                          { this.createUserDisplayList( this.props.item[\"id\"] ) }\n\t\t       </TWBS.ListGroup>\n          </TWBS.Col>\n        </TWBS.Row>\n\n          {/* \"Edit Group\" Button - Bottom */}\n          { editButtons }\n\n        </TWBS.Grid>\n      );\n  }\n});\n\n// EDITOR PANE\nconst GroupEdit = React.createClass({\n\n    mixins: [  inputHelpers\n              , groupMixins\n              , viewerCommon ]\n\n  , contextTypes: {\n        router: React.PropTypes.func\n    }\n\n  , propTypes: {\n      item: React.PropTypes.object.isRequired\n    }\n\n  , getInitialState: function () {\n      var remoteState = this.setRemoteState( this.props );\n\n      return {\n          locallyModifiedValues  : {}\n        , remotelyModifiedValues : {}\n        , remoteState            : remoteState\n        , mixedValues            : this.props.item\n        , lastSentValues         : {}\n        , dataKeys               : this.props.viewData[\"format\"][\"dataKeys\"]\n      };\n    }\n\n  , componentWillRecieveProps: function( nextProps ) {\n      var newRemoteModified = {};\n      var newLocallyModified = {};\n\n      // remotelyModifiedValues represents everything that's changed remotely\n      // since the view was opened. This is the difference between the newly arriving\n      // props and the initial ones. Read-only and unknown values are ignored.\n      // TODO: Use this to show alerts for remote changes on sections the local\n      // administrator is working on.\n      var mismatchedRemoteFields = _.pick(nextProps.item, function( value, key ) {\n        return _.isEqual( this.state.remoteState[ key ], value );\n      }, this);\n\n      newRemoteModified = this.removeReadOnlyFields( mismatchedRemoteFields, nextProps.viewData[\"format\"][\"dataKeys\"]);\n\n      // remoteState records the item as it was when the view was first\n      // opened. This is used to mark changes that have occurred remotely since\n      // the user began editing.\n      // It is important to know if the incoming change resulted from a call\n      // made by the local administrator. When this happens, we reset the\n      // remoteState to get rid of remote edit markers, as the local version\n      // has thus become authoritative.\n      // We check this by comparing the incoming changes (newRemoteModified) to the\n      // last request sent (this.state.lastSentValues). If this check succeeds,\n      // we reset newLocallyModified and newRemoteModified, as there are no longer\n      // any remote or local changes to record.\n      // TODO: Do this in a deterministic way, instead of relying on comparing\n      // values.\n      if (_.isEqual(this.state.lastSentValues, newRemoteModified)){\n          newRemoteModified  = {};\n          newLocallyModified = {};\n          this.setState ({\n              remoteState           : this.setRemoteState(nextProps)\n            , locallyModifiedValues : newLocallyModified\n          });\n      }\n\n      this.setState({\n          remotelyModifiedValues : newRemoteModified\n      });\n    }\n\n  , submitGroupUpdate: function () {\n      var valuesToSend = this.removeReadOnlyFields( this.state.locallyModifiedValues, this.state.dataKeys );\n\n      // Only bother to submit an update if there is anything to update.\n      if ( !_.isEmpty( valuesToSend ) ){\n        GroupsMiddleware.updateGroup( this.props.item[\"id\"], valuesToSend, this.submissionRedirect( valuesToSend ) );\n        // Save a record of the last changes we sent.\n        this.setState({\n            lastSentValues : valuesToSend\n        });\n      } else {\n          console.warn( \"Attempted to send a Group update with no valid fields.\" );\n      }\n    }\n\n  , render: function () {\n      var builtInGroupAlert = null;\n      var editButtons       = null;\n      var inputForm         = null;\n\n      if ( this.props.item[\"builtin\"] ) {\n        builtInGroupAlert = (\n          <TWBS.Alert bsStyle   = \"warning\"\n                      className = \"text-center\">\n            <b>{\"You should only edit a system group if you know exactly what you are doing.\"}</b>\n          </TWBS.Alert>\n        );\n      }\n\n      editButtons =\n        <TWBS.ButtonToolbar>\n            <TWBS.Button className = \"pull-left\"\n                         disabled  = { this.props.item[\"builtin\"] }\n                         onClick   = { this.deleteGroup }\n                         bsStyle   = \"danger\" >{\"Delete Group\"}</TWBS.Button>\n            <TWBS.Button className = \"pull-right\"\n                         onClick   = { this.props.handleViewChange.bind(null, \"view\") }\n                         bsStyle   = \"default\" >{\"Cancel\"}</TWBS.Button>\n            <TWBS.Button className = \"pull-right\"\n                         disabled  = { _.isEmpty( this.state.locallyModifiedValues ) ? true : false }\n                         onClick   = { this.submitGroupUpdate }\n                         bsStyle   = \"info\" >{\"Save Changes\"}</TWBS.Button>\n        </TWBS.ButtonToolbar>;\n\n      inputForm =\n        <form className=\"form-horizontal\">\n          <TWBS.Grid fluid>\n            <TWBS.Row>\n              <TWBS.Col xs = {12}>\n                {/*Group id*/}\n                <TWBS.Input type             = \"text\"\n                            label            = { \"Group ID\" }\n                            value            = { this.state.mixedValues[\"id\"] ? this.state.mixedValues[\"id\"] : \"\" }\n                            onChange         = { this.editHandleValueChange.bind( null, \"id\" ) }\n                            ref              = { \"id\" }\n                            key              = { \"id\" }\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"id\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\"\n                            disabled         = { !this.isMutable( \"id\", this.state.dataKeys) } />\n                {/* name */}\n                <TWBS.Input type             = \"text\"\n                            label            = { \"Group Name\" }\n                            value            = { this.state.mixedValues[\"name\"] ? this.state.mixedValues[\"name\"] : \"\" }\n                            onChange         = { this.editHandleValueChange.bind( null, \"name\" ) }\n                            ref              = { \"name\" }\n                            key              = { \"name\" }\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"name\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\"\n                            disabled         = { !this.isMutable( \"name\", this.state.dataKeys) } />\n              </TWBS.Col>\n            </TWBS.Row>\n          </TWBS.Grid>\n        </form>;\n\n      return (\n        <TWBS.Grid fluid>\n          {/* Save and Cancel Buttons - Top */}\n          { editButtons }\n\n          {/* Shows a warning if the group is built in */}\n          { builtInGroupAlert }\n\n          {inputForm}\n\n          {/* Save and Cancel Buttons - Bottom */}\n          { editButtons }\n        </TWBS.Grid>\n      );\n    }\n});\n\n\n// CONTROLLER-VIEW\nconst GroupItem = React.createClass({\n\n      propTypes: {\n        viewData : React.PropTypes.object.isRequired\n      }\n\n    , mixins: [ routerShim, clientStatus ]\n\n    , getInitialState: function () {\n        return {\n            targetGroup : this.getGroupFromStore()\n          , currentMode : \"view\"\n          , activeRoute : this.getDynamicRoute()\n        };\n      }\n\n    , componentDidUpdate: function( prevProps, prevState ) {\n        var activeRoute = this.getDynamicRoute();\n\n        if ( activeRoute !== prevState.activeRoute ) {\n          this.setState({\n              targetGroup  : this.getGroupFromStore()\n            , currentMode : \"view\"\n            , activeRoute : activeRoute\n          });\n        }\n      }\n\n    , componentDidMount: function () {\n        GroupsStore.addChangeListener( this.updateGroupInState );\n      }\n\n    , componentWillUnmount: function () {\n        GroupsStore.removeChangeListener( this.updateGroupInState );\n      }\n\n    , getGroupFromStore: function () {\n        return GroupsStore.findGroupByKeyValue( this.props.viewData.format[\"selectionKey\"], this.getDynamicRoute() );\n      }\n\n    , updateGroupInState: function () {\n        this.setState({ targetGroup: this.getGroupFromStore() });\n      }\n\n    , handleViewChange: function( nextMode, event ) {\n        this.setState({ currentMode: nextMode });\n      }\n\n    , render: function () {\n        var DisplayComponent = null;\n        var processingText = \"\";\n\n        if ( this.state.SESSION_AUTHENTICATED && this.state.targetGroup ) {\n\n          // PROCESSING OVERLAY\n          if ( GroupsStore.isLocalTaskPending( this.state.targetGroup[\"id\"] ) ) {\n            processingText = \"Saving changes to '\" + this.state.targetGroup[ this.props.viewData.format[\"primaryKey\" ] ] + \"'\";\n          } else if (GroupsStore.isGroupUpdatePending( this.state.targetGroup[ \"id\"] ) ) {\n            processingText = \"Group '\" + this.state.targetGroup[ this.props.viewData.format[\"primaryKey\"] ] + \"' was updated remotely.\";\n          }\n\n          // DISPLAY COMPONENT\n          var childProps = {\n              handleViewChange : this.handleViewChange\n            , item             : this.state.targetGroup\n            , viewData         : this.props.viewData\n          };\n\n          switch( this.state.currentMode ) {\n            default:\n            case \"view\":\n              DisplayComponent = <GroupView { ...childProps } />;\n              break;\n            case \"edit\":\n              DisplayComponent = <GroupEdit { ...childProps } />;\n              break;\n          }\n        }\n\n        return (\n          <div className=\"viewer-item-info\">\n\n            {/* Overlay to block interaction while tasks or updates are processing */}\n            <editorUtil.updateOverlay updateString={ processingText } />\n\n            { DisplayComponent }\n\n          </div>\n        );\n      }\n});\n\nexport default GroupItem;\n"]}
{"version":3,"sources":["app/jsx/views/Accounts/Users/UserItem.jsx"],"names":[],"mappings":"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","file":"app/jsx/views/Accounts/Users/UserItem.jsx","sourcesContent":["// User Item Template\n// ==================\n// Handles the viewing and editing of individual user items. Shows a non-editable\n// overview of the user account, and mode-switches to a more standard editor\n// panel. User is set by providing a route parameter.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\nimport TWBS from \"react-bootstrap\";\n\nimport routerShim from \"../../../components/mixins/routerShim\";\nimport clientStatus from \"../../../components/mixins/clientStatus\";\n\nimport viewerUtil from \"../../../components/Viewer/viewerUtil\";\nimport editorUtil from \"../../../components/Viewer/Editor/editorUtil\";\n\nimport UsersMiddleware from \"../../../middleware/UsersMiddleware\";\nimport UsersStore from \"../../../stores/UsersStore\";\n\nimport GroupsStore from \"../../../stores/GroupsStore\";\n\nimport inputHelpers from \"../../../components/mixins/inputHelpers\";\nimport userMixins from \"../../../components/mixins/userMixins\";\nimport viewerCommon from \"../../../components/mixins/viewerCommon\";\n\n// OVERVIEW PANE\nconst UserView = React.createClass({\n\n    mixins: [  userMixins\n             , viewerCommon ]\n\n  , contextTypes: {\n        router: React.PropTypes.func\n    }\n\n  , propTypes: {\n      item: React.PropTypes.object.isRequired\n    }\n\n  , getGroupName: function(groupID) {\n      var group = GroupsStore.getGroup(groupID);\n\n      if ( group ) {\n        return group.name;\n      } else {\n        // TODO: Have a policy to deal with a user assigned to a nonexistant group.\n        return null;\n      }\n    }\n\n  , createGroupDisplayList: function (){\n      var listGroupItemArray = [] ;\n\n      listGroupItemArray = _.map( this.props.item[ \"groups\" ], function( groupID ){\n        var displayItem = null;\n        var group = GroupsStore.getGroup( groupID );\n\n        if ( group ){\n          displayItem = <TWBS.ListGroupItem>{ group.name }</TWBS.ListGroupItem>;\n        }\n\n        return displayItem;\n      }, this );\n\n      return listGroupItemArray;\n  }\n\n  , render: function () {\n      var builtInUserAlert = null;\n      var editButtons      = null;\n\n      if ( this.props.item[\"builtin\"] ) {\n        builtInUserAlert = (\n          <TWBS.Alert bsStyle   = \"info\"\n                      className = \"text-center\">\n            <b>{\"This is a built-in FreeNAS user account.\"}</b>\n          </TWBS.Alert>\n        );\n      }\n\n      editButtons = (\n        <TWBS.ButtonToolbar>\n            <TWBS.Button className = \"pull-left\"\n                         disabled  = { this.props.item[\"builtin\"] }\n                         onClick   = { this.deleteUser }\n                         bsStyle   = \"danger\" >{\"Delete User\"}</TWBS.Button>\n            <TWBS.Button className = \"pull-right\"\n                         onClick   = { this.props.handleViewChange.bind(null, \"edit\") }\n                         bsStyle   = \"info\" >{\"Edit User\"}</TWBS.Button>\n        </TWBS.ButtonToolbar>\n      );\n\n      return (\n        <TWBS.Grid fluid>\n          {/* \"Edit User\" Button - Top */}\n          { editButtons }\n\n          {/* User icon and general information */}\n          <TWBS.Row>\n            <TWBS.Col xs={3}\n                      className=\"text-center\">\n              <viewerUtil.ItemIcon primaryString   = { this.props.item[\"full_name\"] }\n                                   fallbackString  = { this.props.item[\"username\"] }\n                                   iconImage       = { this.props.item[\"user_icon\"] }\n                                   seedNumber      = { this.props.item[\"id\"] } />\n            </TWBS.Col>\n            <TWBS.Col xs={9}>\n              <h3>{ this.props.item[\"username\"] }</h3>\n              <h4 className=\"text-muted\">{ viewerUtil.writeString( this.props.item[\"full_name\"], \"\\u200B\" ) }</h4>\n              <h4 className=\"text-muted\">{ viewerUtil.writeString( this.props.item[\"email\"], \"\\u200B\" ) }</h4>\n              <hr />\n            </TWBS.Col>\n          </TWBS.Row>\n\n          {/* Shows a warning if the user account is built in */}\n          { builtInUserAlert }\n\n          {/* Primary user data overview */}\n          <TWBS.Row>\n            <viewerUtil.DataCell title  = { \"User ID\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"id\"] } />\n            <viewerUtil.DataCell title  = { \"Primary Group\" }\n                                 colNum = { 3 }\n                                 entry  = { this.getGroupName(this.props.item[\"group\"]) } />\n            <viewerUtil.DataCell title  = { \"Shell\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"shell\"] } />\n            <viewerUtil.DataCell title  = { \"Locked Account\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"locked\"] ? this.props.item[\"locked\"] : false } />\n            <viewerUtil.DataCell title  = { \"Sudo Access\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"sudo\"] ? this.props.item[\"sudo\"]: false } />\n            <viewerUtil.DataCell title  = { \"Password Disabled\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"password_disabled\"] ? this.props.item[\"password_disabled\"]: false } />\n            <viewerUtil.DataCell title  = { \"Logged In\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"logged-in\"] ? this.props.item[\"logged-in\"]: false } />\n            <viewerUtil.DataCell title  = { \"Home Directory\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"home\"] } />\n            <viewerUtil.DataCell title  = { \"email\" }\n                                 colNum = { 3 }\n                                 entry  = { this.props.item[\"email\"] ? this.props.item[\"email\"]: \"\" } />\n            <TWBS.Col xs        = {12}\n                      className =\"text-muted\" >\n                        <h4 className = \"text-muted\" >{ \"Other Groups\" }</h4>\n                        <TWBS.ListGroup>\n                          { this.createGroupDisplayList() }\n                        </TWBS.ListGroup>\n            </TWBS.Col>\n          </TWBS.Row>\n\n          {/* \"Edit User\" Button - Bottom */}\n          { editButtons }\n\n        </TWBS.Grid>\n      );\n    }\n\n});\n\n\n// EDITOR PANE\nconst UserEdit = React.createClass({\n\n  mixins: [ inputHelpers\n          , userMixins\n          , viewerCommon ]\n\n  , contextTypes: {\n      router: React.PropTypes.func\n    }\n\n  , propTypes: { item : React.PropTypes.object.isRequired\n               , viewData : React.PropTypes.object.isRequired\n               }\n\n  , getInitialState: function () {\n      var remoteState = this.setRemoteState( this.props );\n\n      return { locallyModifiedValues : {}\n             , remotelyModifiedValues : {}\n             , remoteState : remoteState\n             , mixedValues : this.props.item\n             , lastSentValues : {}\n             , dataKeys : this.props.viewData[\"format\"][\"dataKeys\"]\n      };\n    }\n\n  , componentWillReceiveProps: function( nextProps ) {\n      var newRemoteModified  = {};\n      var newLocallyModified = {};\n      var dataKeys = nextProps.viewData[\"format\"][\"dataKeys\"];\n\n      // remotelyModifiedValues represents everything that's changed remotely\n      // since the view was opened. This is the difference between the newly arriving\n      // props and the initial ones. Read-only and unknown values are ignored.\n      // TODO: Use this to show alerts for remote changes on sections the local\n      // administrator is working on.\n      var mismatchedRemoteFields = _.pick(nextProps.item, function( value, key ) {\n        return _.isEqual( this.state.remoteState[ key ], value );\n      }, this);\n\n      newRemoteModified = this.removeReadOnlyFields( mismatchedRemoteFields, dataKeys);\n\n      // remoteState records the item as it was when the view was first\n      // opened. This is used to mark changes that have occurred remotely since\n      // the user began editing.\n      // It is important to know if the incoming change resulted from a call\n      // made by the local administrator. When this happens, we reset the\n      // remoteState to get rid of remote edit markers, as the local version\n      // has thus become authoritative.\n      // We check this by comparing the incoming changes (newRemoteModified) to the\n      // last request sent (this.state.lastSentValues). If this check succeeds,\n      // we reset newLocallyModified and newRemoteModified, as there are no longer\n      // any remote or local changes to record.\n      // TODO: Do this in a deterministic way, instead of relying on comparing\n      // values.\n      if (_.isEqual(this.state.lastSentValues, newRemoteModified)){\n          newRemoteModified  = {};\n          newLocallyModified = {};\n          this.setState ({\n              remoteState           : this.setRemoteState(nextProps)\n            , locallyModifiedValues : newLocallyModified\n          });\n      }\n\n      this.setState({\n          remotelyModifiedValues : newRemoteModified\n      });\n    }\n\n    // TODO: Validate that input values are legitimate for their field. For example,\n    // id should be a number.\n  , submitUserUpdate: function () {\n      // Make sure nothing read-only made it in somehow.\n      var valuesToSend = this.removeReadOnlyFields( this.state.locallyModifiedValues, this.state.dataKeys );\n\n      // Convert the array of strings provided by the form to an array of integers.\n      if( !_.isEmpty( valuesToSend[ \"groups\" ] ) ){\n        valuesToSend[ \"groups\" ] = this.parseGroupsArray( valuesToSend[ \"groups\" ] );\n      }\n\n      // Only bother to submit an update if there is anything to update.\n      if (!_.isEmpty( valuesToSend ) ){\n        UsersMiddleware.updateUser( this.props.item[ \"id\" ], valuesToSend, this.submissionRedirect( valuesToSend ) );\n\n        // Save a record of the last changes we sent.\n        this.setState({\n            lastSentValues : valuesToSend\n        });\n      } else {\n          console.warn( \"Attempted to send a User update with no valid fields.\" );\n      }\n\n    }\n\n    // TODO: Currently this section just arbitrarily handles every property the\n    // middleware sends in the order the browser sends it. This should be updated\n    // to have a deliberate design.\n    // TODO: Add alerts when a remote administrator has changed items that the\n    // local administrator is also working on.\n  , render: function () {\n      var builtInUserAlert  = null;\n      var editButtons       = null;\n      var inputForm         = null;\n\n      if ( this.props.item[\"builtin\"] ) {\n        builtInUserAlert = (\n          <TWBS.Alert bsStyle   = \"warning\"\n                      className = \"text-center\">\n            <b>{\"You should only edit a system user account if you know exactly what you're doing.\"}</b>\n          </TWBS.Alert>\n        );\n      }\n\n      editButtons =\n        <TWBS.ButtonToolbar>\n            <TWBS.Button className = \"pull-left\"\n                         disabled  = { this.props.item[\"builtin\"] }\n                         onClick   = { this.deleteUser }\n                         bsStyle   = \"danger\" >{\"Delete User\"}</TWBS.Button>\n            <TWBS.Button className = \"pull-right\"\n                         onClick   = { this.props.handleViewChange.bind(null, \"view\") }\n                         bsStyle   = \"default\" >{\"Cancel\"}</TWBS.Button>\n            <TWBS.Button className = \"pull-right\"\n                         disabled  = { _.isEmpty( this.state.locallyModifiedValues ) ? true : false }\n                         onClick   = { this.submitUserUpdate }\n                         bsStyle   = \"info\" >{\"Save Changes\"}</TWBS.Button>\n        </TWBS.ButtonToolbar>;\n\n      inputForm =\n        <form className = \"form-horizontal\">\n          <TWBS.Grid fluid>\n            <TWBS.Row>\n              <TWBS.Col xs = {8}>\n                {/* User id */}\n                <TWBS.Input type             = \"text\"\n                            label            = { \"User ID\" }\n                            defaultValue     = { this.props.item[ \"id\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"id\" ) }\n                            key              = { \"id\" }\n                            ref              = \"id\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"id\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* username */}\n                <TWBS.Input type             = \"text\"\n                            label            = { \"User Name\" }\n                            defaultValue     = { this.props.item[ \"username\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"username\" ) }\n                            key              = { \"username\" }\n                            ref              = \"username\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"username\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* full_name*/}\n                <TWBS.Input type             = \"text\"\n                            label            = { \"Full Name\" }\n                            defaultValue     = { this.props.item[ \"full_name\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"full_name\" ) }\n                            key              = { \"full_name\" }\n                            ref              = \"full_name\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"full_name\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* email */}\n                  <TWBS.Input type             = \"text\"\n                            label            = { \"email\" }\n                            defaultValue     = { this.props.item[ \"email\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"email\" ) }\n                            key              = { \"email\" }\n                            ref              = \"email\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"email\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* shell */}\n                <TWBS.Input type             = \"select\"\n                            label            = { \"Shell\" }\n                            defaultValue     = { this.props.item[ \"shell\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"shell\" ) }\n                            key              = { \"shell\" }\n                            ref              = \"shell\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"shell\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" >\n                            { this.generateOptionsList( this.state.shells, \"name\" ) }\n                </TWBS.Input>\n                {/* primary group */}\n                <TWBS.Input type             = \"select\"\n                            label            = { \"Primary Group\" }\n                            defaultValue     = { this.props.item[ \"group\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"group\" ) }\n                            key              = { \"group\" }\n                            ref              = \"group\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"group\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" >\n                            { this.generateOptionsList( GroupsStore.getAllGroups(), \"id\", \"name\" ) }\n                </TWBS.Input>\n                {/* sshpubkey */}\n                <TWBS.Input type             = \"textarea\"\n                            label            = { \"Public Key\" }\n                            defaultValue     = { this.props.item[ \"sshpubkey\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"sshpubkey\" ) }\n                            key              = { \"sshpubkey\" }\n                            ref              = \"sshpubkey\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"sshpubkey\"]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\"\n                            rows             = \"10\" >\n                </TWBS.Input>\n                {/* Other Groups */}\n                <TWBS.Input type             = \"select\"\n                            label            = \"Other Groups\"\n                            defaultValue     = { this.props.item[ \"groups\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"groups\" ) }\n                            key              = \"groups\"\n                            ref              = \"groups\"\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[ \"groups\" ]) ? \"editor-was-modified\" : \"\" }\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\"\n                            multiple >\n                            { this.generateOptionsList( GroupsStore.getAllGroups(), \"id\", \"name\" ) }\n                </TWBS.Input>\n              </TWBS.Col>\n              <TWBS.Col xs = {4}>\n                {/* locked */}\n                <TWBS.Input type             = \"checkbox\"\n                            checked          = { this.state.mixedValues[\"locked\"] }\n                            label            = { \"Locked\" }\n                            value            = { this.state.mixedValues[\"locked\"] ? this.state.mixedValues[\"locked\"] : \"\" }\n                            defaultValue     = { this.props.item[ \"locked\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"locked\" ) }\n                            key              = { \"locked\" }\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"locked\"]) ? \"editor-was-modified\" : \"\" }\n                            ref              = \"locked\"\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* sudo */}\n                <TWBS.Input type             = \"checkbox\"\n                            checked          = { this.state.mixedValues[\"sudo\"] }\n                            label            = { \"sudo\" }\n                            value            = { this.state.mixedValues[\"sudo\"] ? this.state.mixedValues[\"sudo\"] : \"\" }\n                            defaultValue     = { this.props.item[ \"sudo\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"sudo\" ) }\n                            key              = { \"sudo\" }\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"sudo\"]) ? \"editor-was-modified\" : \"\" }\n                            ref              = \"sudo\"\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* password_disabled */}\n                <TWBS.Input type             = \"checkbox\"\n                            label            = { \"password_disabled\" }\n                            checked          = { this.state.mixedValues[\"password_disabled\"] }\n                            value            = { this.state.mixedValues[\"password_disabled\"] ? this.state.mixedValues[\"password_disabled\"] : \"\" }\n                            defaultValue     = { this.props.item[ \"password_disabled\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"password_disabled\" ) }\n                            key              = { \"password_disabled\" }\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"password_disabled\"]) ? \"editor-was-modified\" : \"\" }\n                            ref              = \"password_disabled\"\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n                {/* logged-in */}\n                <TWBS.Input type             = \"checkbox\"\n                            checked          = { this.state.mixedValues[\"logged-in\"] }\n                            label            = { \"logged-in\" }\n                            value            = { this.state.mixedValues[\"logged-in\"] ? this.state.mixedValues[\"logged-in\"] : \"\" }\n                            defaultValue     = { this.props.item[ \"logged-in\" ] }\n                            onChange         = { this.editHandleValueChange.bind( null, \"logged-in\" ) }\n                            key              = { \"logged-in\" }\n                            groupClassName   = { _.has(this.state.locallyModifiedValues[\"logged-in\"]) ? \"editor-was-modified\" : \"\" }\n                            ref              = \"logged-in\"\n                            labelClassName   = \"col-xs-4\"\n                            wrapperClassName = \"col-xs-8\" />\n              </TWBS.Col>\n            </TWBS.Row>\n          </TWBS.Grid>\n        </form>;\n\n      return (\n        <TWBS.Grid fluid>\n          {/* Save and Cancel Buttons - Top */}\n          { editButtons }\n\n          {/* Shows a warning if the user account is built in */}\n          { builtInUserAlert }\n\n          {inputForm}\n\n          {/* Save and Cancel Buttons - Bottom */}\n          { editButtons }\n        </TWBS.Grid>\n      );\n    }\n\n});\n\n\n// CONTROLLER-VIEW\nconst UserItem = React.createClass({\n\n    propTypes: {\n        viewData : React.PropTypes.object.isRequired\n    }\n\n  , mixins: [ routerShim, clientStatus ]\n\n  , getInitialState: function () {\n      return {\n          targetUser  : this.getUserFromStore()\n        , currentMode : \"view\"\n        , activeRoute : this.getDynamicRoute()\n      };\n    }\n\n  , componentDidUpdate: function( prevProps, prevState ) {\n      var activeRoute = this.getDynamicRoute();\n\n      if ( activeRoute !== prevState.activeRoute ) {\n        this.setState({\n            targetUser  : this.getUserFromStore()\n          , currentMode : \"view\"\n          , activeRoute : activeRoute\n        });\n      }\n    }\n\n  , componentDidMount: function () {\n      UsersStore.addChangeListener( this.updateUserInState );\n    }\n\n  , componentWillUnmount: function () {\n      UsersStore.removeChangeListener( this.updateUserInState );\n    }\n\n  , getUserFromStore: function () {\n      return UsersStore.findUserByKeyValue( this.props.viewData.format[\"selectionKey\"], this.getDynamicRoute() );\n    }\n\n  , updateUserInState: function () {\n      this.setState({ targetUser: this.getUserFromStore() });\n    }\n\n  , handleViewChange: function ( nextMode, event ) {\n      this.setState({ currentMode: nextMode });\n    }\n\n  , render: function () {\n      var DisplayComponent = null;\n      var processingText   = \"\";\n\n      if ( this.state.SESSION_AUTHENTICATED && this.state.targetUser ) {\n\n        // PROCESSING OVERLAY\n        if ( UsersStore.isLocalTaskPending( this.state.targetUser[\"id\"] ) ) {\n          processingText = \"Saving changes to '\" + this.state.targetUser[ this.props.viewData.format[\"primaryKey\"] ] + \"'\";\n        } else if ( UsersStore.isUserUpdatePending( this.state.targetUser[\"id\"] ) ) {\n          processingText = \"User '\" + this.state.targetUser[ this.props.viewData.format[\"primaryKey\"] ] + \"' was updated remotely.\";\n        }\n\n        // DISPLAY COMPONENT\n        var childProps = {\n            handleViewChange : this.handleViewChange\n          , item             : this.state.targetUser\n          , viewData         : this.props.viewData\n        };\n\n        switch ( this.state.currentMode ) {\n          default:\n          case \"view\":\n            DisplayComponent = <UserView { ...childProps } />;\n            break;\n\n          case \"edit\":\n            DisplayComponent = <UserEdit { ...childProps } />;\n            break;\n        }\n      }\n\n      return (\n        <div className=\"viewer-item-info\">\n\n          {/* Overlay to block interaction while tasks or updates are processing */}\n          <editorUtil.updateOverlay updateString={ processingText } />\n\n          { DisplayComponent }\n\n        </div>\n      );\n    }\n\n});\n\nexport default UserItem;\n"]}
{"version":3,"sources":["app/jsx/dispatcher/FreeNASDispatcher.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;qBACJ,OAAO;;;;oBAEE,MAAM;;yCAEF,+BAA+B;;AAE9D,IAAI,aAAa,CAAC;AAClB,IAAI,iBAAiB,CAAC;;;;;;;;;;;AAYtB,aAAa,GAAG,mBAAM,KAAK,CAAE,UAAW,OAAO,EAAE,QAAQ,EAAG;AAC1D,mBAAiB,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAC;;AAEtC,MAAK,oBAAE,UAAU,CAAE,QAAQ,CAAE,EAAG;AAAE,YAAQ,EAAE,CAAC;GAAE;CAChD,CAAC,CAAC;;AAEH,iBAAiB,GAAG,oBAAE,MAAM,CAAE,UAvBrB,UAAU,EAuB2B,EAAE;;AAE5C,wBAAsB,EAAE,gCAAU,MAAM,EAAG;AACzC,iBAAa,CAAC,IAAI,CAAC;AACf,YAAM,EAAG,2BAzBV,cAAc,CAyBW,mBAAmB,CAAC;AAC5C,YAAM,EAAG,MAAM;KAClB,CAAC,CAAC;GACJ;;AAED,2BAAyB,EAAE,mCAAU,MAAM,EAAG;AAC5C,iBAAa,CAAC,IAAI,CAAC;AACf,YAAM,EAAG,2BAhCV,cAAc,CAgCW,sBAAsB,CAAC;AAC/C,YAAM,EAAG,MAAM;KAClB,CAAC,CAAC;GACJ;;AAED,oBAAkB,EAAE,4BAAU,MAAM,EAAG;AACrC,iBAAa,CAAC,IAAI,CAAC;AACf,YAAM,EAAG,2BAvCV,cAAc,CAuCW,eAAe,CAAC;AACxC,YAAM,EAAG,MAAM;KAClB,CAAC,CAAC;GACJ;;CAEJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,iBAAiB,CAAC","file":"app/jsx/dispatcher/FreeNASDispatcher.js","sourcesContent":["// FreeNAS Dispatcher\n// ------------------\n// Flux dispatcher used throughout the FreeNAS webapp. Manages all data flow,\n// updates data stores with new data from user interaction or from the\n// middleware.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport async from \"async\";\n\nimport { Dispatcher } from \"flux\";\n\nimport { PayloadSources } from \"../constants/FreeNASConstants\";\n\nvar dispatchQueue;\nvar FreeNASDispatcher;\n\n\n// WARNING: This is a dangerous way of handling dispatches. Because of the\n// way the FreeNAS webapp handles subscriptions, nested routes, and component\n// heirarchy, it's possible for one dispatch to indirectly trigger another as\n// part of the same call stack. Enqueueing dispatches in this way causes all\n// dispatches to wait for the previous call stack to finish, but may\n// inadvertently allow cascading or endless dispatches. Be careful.\n\n// See also: https://github.com/facebook/flux/issues/106\n\ndispatchQueue = async.queue( function ( payload, callback ) {\n  FreeNASDispatcher.dispatch( payload );\n\n  if ( _.isFunction( callback ) ) { callback(); }\n});\n\nFreeNASDispatcher = _.assign( new Dispatcher(), {\n\n    handleMiddlewareAction: function( action ) {\n      dispatchQueue.push({\n          source : PayloadSources[\"MIDDLEWARE_ACTION\"]\n        , action : action\n      });\n    }\n\n  , handleMiddlewareLifecycle: function( action ) {\n      dispatchQueue.push({\n          source : PayloadSources[\"MIDDLEWARE_LIFECYCLE\"]\n        , action : action\n      });\n    }\n\n  , handleClientAction: function( action ) {\n      dispatchQueue.push({\n          source : PayloadSources[\"CLIENT_ACTION\"]\n        , action : action\n      });\n    }\n\n});\n\nmodule.exports = FreeNASDispatcher;\n"]}
{"version":3,"sources":["app/jsx/stores/PowerStore.js"],"names":[],"mappings":"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","file":"app/jsx/stores/PowerStore.js","sourcesContent":["// Power Flux Store\n// ----------------\n// This is suraj's experimental setup might change or go away completely\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\nvar UPDATE_MASK  = [ \"power.changed\", \"update.changed\" ];\n\nvar ongoingEvents = {};\n\n\nvar PowerStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function () {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function ( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function ( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getUpdateMask: function () {\n      return UPDATE_MASK;\n    }\n\n  , isEventPending: function () {\n    if ( typeof ( _.keys( ongoingEvents )[0] ) !== \"undefined\" ) {\n      return [ true, ongoingEvents[_.keys( ongoingEvents )[0]]];\n    }\n    return [ false, \"\" ];\n  }\n\n  , isRebootPending: function () {\n    if ( _.values( ongoingEvents ).indexOf( \"reboot\" ) !== -1 ) {\n      return true;\n    }\n    return false;\n  }\n\n  , isShutDownPending: function () {\n    if ( _.values( ongoingEvents ).indexOf( \"shutdown\" ) !== -1 ) {\n      return true;\n    }\n    return false;\n  }\n\n  , isUpdatePending: function () {\n    if ( _.values( ongoingEvents ).indexOf( \"update\" ) !== -1 ) {\n      return true;\n    }\n    return false;\n  }\n\n});\n\nPowerStore.dispatchToken = FreeNASDispatcher.register( function ( payload ) {\n  var action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.UPDATE_SOCKET_STATE:\n      // clear ongoingEvents\n      ongoingEvents = {};\n      PowerStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      var args = action.eventData.args;\n      var taskID   = args.args[\"id\"];\n\n      if ( UPDATE_MASK.indexOf( args[\"name\"] ) !== -1  ) {\n        var updateData = args[\"args\"];\n\n        if ( args[\"name\"] === \"power.changed\" ) {\n          ongoingEvents[taskID] = updateData[\"operation\"];\n        } else if ( args[\"name\"] === \"update.changed\" &&\n                    updateData[\"operation\"] === \"started\" ) {\n          ongoingEvents[taskID] = \"update\";\n        }\n\n        PowerStore.emitChange();\n\n      // TODO: Make this more generic, triage it earlier,\n      // create ActionTypes for it\n      } else if ( args[\"name\"] === \"task.updated\" &&\n                  args.args[\"state\"] === \"FINISHED\" &&\n                  _.keys( ongoingEvents ).indexOf( taskID ) !== -1 ) {\n        if ( ongoingEvents[taskID] !== \"shutdown\" ||\n             ongoingEvents[taskID] !== \"reboot\" ) {\n          delete ongoingEvents.taskID;\n        }\n        PowerStore.emitChange();\n      }\n\n      break;\n\n    default:\n    // No action\n  }\n});\n\nmodule.exports = PowerStore;\n"]}
{"version":3,"sources":["app/jsx/stores/SessionStore.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;sBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;AAE3D,IAAI,YAAY,GAAE,QAAQ,CAAC;;AAE3B,IAAI,YAAY,GAAO,EAAE,CAAC;AAC1B,IAAI,SAAS,GAAU,KAAK,CAAC;;AAE7B,IAAI,YAAY,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,QAVxB,YAAY,CAUyB,SAAS,EAAE;;AAErD,YAAU,EAAE,sBAAY;AACtB,QAAI,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;GAC3B;;AAED,mBAAiB,EAAE,2BAAU,QAAQ,EAAG;AACtC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAU,QAAQ,EAAG;AACzC,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;AAED,gBAAc,EAAE,0BAAY;AAC1B,WAAO,YAAY,CAAC;GACvB;;AAEC,gBAAc,EAAE,0BAAY;AAC1B,WAAO,SAAS,CAAC;GACpB;;CAGF,CAAC,CAAC;;AAEH,YAAY,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAU,OAAO,EAAG;AAC3E,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,UAAS,MAAM,CAAC,IAAI;;AAElB,SAAK,2BArCA,WAAW,CAqCC,iBAAiB;AAChC,kBAAY,GAAG,MAAM,CAAC,WAAW,CAAC;AAClC,eAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,kBAAY,CAAC,UAAU,EAAE,CAAC;AAC1B,YAAM;;AAAA,AAER,YAAQ;;;GAIT;CAEF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","file":"app/jsx/stores/SessionStore.js","sourcesContent":["// Session Flux Store\n// ==================\n// Stores the user's credentials for GUI use. Not the source of truth.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT =\"change\";\n\nvar _currentUser     = \"\";\nvar _loggedIn        = false;\n\nvar SessionStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function () {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getCurrentUser: function () {\n      return _currentUser;\n  }\n\n  , getLoginStatus: function () {\n      return _loggedIn;\n  }\n\n\n});\n\nSessionStore.dispatchToken = FreeNASDispatcher.register( function( payload ) {\n  var action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.UPDATE_AUTH_STATE:\n      _currentUser = action.currentUser;\n      _loggedIn = action.loggedIn;\n      SessionStore.emitChange();\n      break;\n\n    default:\n      //No action\n\n\n  }\n\n});\n\nmodule.exports = SessionStore;\n"]}
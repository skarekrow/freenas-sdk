{"version":3,"sources":["app/jsx/stores/ZfsStore.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;sBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;AAE3D,IAAI,YAAY,GAAG,QAAQ,CAAC;;AAE5B,IAAI,YAAY,GAAG,EAAE,CAAC;AACtB,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,IAAI,oBAAoB,GAAG,EAAE,CAAC;;AAG9B,IAAI,QAAQ,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,QAZpB,YAAY,CAYqB,SAAS,EAAE;;AAEjD,YAAU,EAAE,oBAAS,UAAU,EAAE;AAC/B,QAAI,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;GAC3B;;AAED,mBAAiB,EAAE,2BAAU,QAAQ,EAAG;AACtC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAU,QAAQ,EAAG;AACzC,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;AAED,YAAU,EAAE,oBAAS,IAAI,EAAE;AACzB,WAAO,YAAY,CAAC,IAAI,CAAC,CAAC;GAC3B;AACD,gBAAc,EAAE,wBAAS,IAAI,EAAE;AAC7B,WAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC;GACjC;AACC,oBAAkB,EAAE,4BAAS,IAAI,EAAE;AACjC,WAAO,oBAAoB,CAAC,IAAI,CAAC,CAAC;GACrC;;CAIF,CAAC,CAAC;;AAEH,QAAQ,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAU,OAAO,EAAG;AACvE,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,UAAQ,MAAM,CAAC,IAAI;;AAEjB,SAAK,2BA1CA,WAAW,CA0CC,qBAAqB;AACpC,kBAAY,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;AAClD,cAAQ,CAAC,UAAU,EAAE,CAAC;AACtB,YAAM;;AAAA,AAER,SAAK,2BA/CA,WAAW,CA+CC,0BAA0B;AACzC,sBAAgB,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;AAClE,cAAQ,CAAC,UAAU,EAAE,CAAC;AACtB,YAAM;;AAAA,AAER,SAAK,2BApDA,WAAW,CAoDC,+BAA+B;AAC9C,0BAAoB,CAAC,MAAM,CAAC,uBAAuB,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC;AAC9E,cAAQ,CAAC,UAAU,EAAE,CAAC;AACtB,YAAM;;AAAA,AAER,YAAQ;;GAET;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"app/jsx/stores/ZfsStore.js","sourcesContent":["// Zfs Flux Store\n// ----------------\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _zfsPoolData = {};\nvar _zfsBootPoolData = {};\nvar _zfsPoolGetDisksData = {};\n\n\nvar ZfsStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function(changeType) {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getZfsPool: function(name) {\n      return _zfsPoolData[name];\n    }\n  , getZfsBootPool: function(name) {\n      return _zfsBootPoolData[name];\n  }\n  , getZfsPoolGetDisks: function(name) {\n      return _zfsPoolGetDisksData[name];\n  }\n\n\n\n});\n\nZfsStore.dispatchToken = FreeNASDispatcher.register( function( payload ) {\n  var action = payload.action;\n\n  switch( action.type ) {\n\n    case ActionTypes.RECEIVE_ZFS_POOL_DATA:\n      _zfsPoolData[action.zfsPoolName] = action.zfsPool;\n      ZfsStore.emitChange();\n      break;\n\n    case ActionTypes.RECEIVE_ZFS_BOOT_POOL_DATA:\n      _zfsBootPoolData[action.zfsBootPoolArgument] = action.zfsBootPool;\n      ZfsStore.emitChange();\n      break;\n\n    case ActionTypes.RECEIVE_ZFS_POOL_GET_DISKS_DATA:\n      _zfsPoolGetDisksData[action.zfsPoolGetDisksArgument] = action.zfsPoolGetDisks;\n      ZfsStore.emitChange();\n      break;\n\n    default:\n      // No action\n  }\n});\n\nmodule.exports = ZfsStore;"]}
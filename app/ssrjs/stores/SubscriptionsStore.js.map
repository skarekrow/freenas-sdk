{"version":3,"sources":["app/jsx/stores/SubscriptionsStore.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;sBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;AAE3D,IAAI,YAAY,GAAG,QAAQ,CAAC;;AAE5B,IAAI,WAAW,GAAG,EAAE,CAAC;;;;;;;;;;;;;;;;;AAkBrB,IAAI,kBAAkB,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,QAzB9B,YAAY,CAyB+B,SAAS,EAAE;;AAE3D,YAAU,EAAE,sBAAY;AACtB,QAAI,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;GAC3B;;AAED,mBAAiB,EAAE,2BAAU,QAAQ,EAAG;AACtC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAU,QAAQ,EAAG;AACzC,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;;AAAA,IAGD,mBAAmB,EAAE,+BAAY;AAC/B,WAAO,WAAW,CAAC;GACpB;;AAED,wBAAsB,EAAE,gCAAU,IAAI,EAAG;AACvC,WAAO,WAAW,CAAE,IAAI,CAAE,CAAC;GAC5B;;AAED,iCAA+B,EAAE,yCAAU,IAAI,EAAG;AAChD,QAAI,gBAAgB,GAAG,CAAC,CAAC;;AAEzB,QAAK,oBAAE,QAAQ,CAAE,WAAW,CAAE,IAAI,CAAE,CAAE,EAAG;AACvC,0BAAE,OAAO,CAAE,WAAW,CAAE,IAAI,CAAE,EAAE,UAAU,cAAc,EAAG;AACzD,YAAK,OAAO,cAAc,KAAK,QAAQ,EAAG;AACxC,0BAAgB,IAAI,cAAc,CAAC;SACpC;OACF,CAAC,CAAC;AACH,aAAO,gBAAgB,CAAC;KACzB,MAAM;AACL,aAAO,CAAC,CAAC;KACV;GACF;;CAEJ,CAAC,CAAC;;AAEH,kBAAkB,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAU,OAAO,EAAG;AACjF,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAI,gBAAgB,GAAG,EAAE,CAAC;;AAE1B,UAAQ,MAAM,CAAC,IAAI;;;AAGjB,SAAK,2BArEA,WAAW,CAqEC,4BAA4B;AAC3C,sBAAgB,GAAG,oBAAE,SAAS,CAAE,WAAW,CAAE,CAAC;;AAE9C,0BAAE,OAAO,CAAE,MAAM,CAAC,KAAK,EAAE,UAAU,IAAI,EAAG;AACxC,YAAK,oBAAE,QAAQ,CAAE,gBAAgB,CAAE,IAAI,CAAE,CAAE,EAAG;AAC5C,cAAK,oBAAE,QAAQ,CAAE,gBAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,CAAE,EAAG;AAClE,4BAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,EAAE,CAAC;WAClD,MAAM;AACL,4BAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,GAAG,CAAC,CAAC;WACpD;SACF,MAAM;AACL,0BAAgB,CAAE,IAAI,CAAE,GAAG,EAAE,CAAC;AAC9B,0BAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,GAAG,CAAC,CAAC;SACpD;OACF,CAAC,CAAC;;AAEH,iBAAW,GAAG,gBAAgB,CAAC;;AAE/B,wBAAkB,CAAC,UAAU,EAAE,CAAC;AAChC,YAAM;;AAAA,AAER,SAAK,2BA1FA,WAAW,CA0FC,gCAAgC;AAC/C,sBAAgB,GAAG,oBAAE,SAAS,CAAE,WAAW,CAAE,CAAC;;AAE9C,0BAAE,OAAO,CAAE,MAAM,CAAC,KAAK,EAAE,UAAU,IAAI,EAAG;AACxC,YAAK,oBAAE,QAAQ,CAAE,gBAAgB,CAAE,IAAI,CAAE,CAAE,EAAG;AAC5C,cAAK,gBAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,IAAI,CAAC,EAAG;AACzD,mBAAO,gBAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,CAAC;WACvD,MAAM;AACL,4BAAgB,CAAE,IAAI,CAAE,CAAE,MAAM,CAAC,WAAW,CAAE,EAAE,CAAC;WAClD;SACF,MAAM;AACL,iBAAO,CAAC,IAAI,CAAE,6BAA6B,GAAG,IAAI,GAAG,kDAAkD,CAAC,CAAC;SAC1G;;AAED,YAAK,oBAAE,OAAO,CAAE,gBAAgB,CAAE,IAAI,CAAE,CAAE,EAAG;AAC3C,iBAAO,gBAAgB,CAAE,IAAI,CAAE,CAAC;SACjC;OACF,CAAC,CAAC;;AAEH,iBAAW,GAAG,gBAAgB,CAAC;;AAE/B,wBAAkB,CAAC,UAAU,EAAE,CAAC;AAChC,YAAM;;AAAA,AAER,SAAK,2BAlHA,WAAW,CAkHC,eAAe;;AAE9B,iBAAW,GAAG,gBAAgB,CAAC;AAC/B,wBAAkB,CAAC,UAAU,EAAE,CAAC;AAChC,YAAM;;AAAA,AAER,YAAQ;;GAET;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,kBAAkB,CAAC","file":"app/jsx/stores/SubscriptionsStore.js","sourcesContent":["// Middleware Flux Store\n// =====================\n// Maintain consistent information about the general state of the middleware\n// client, including which channels are connected, pending calls, and blocked operations.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _subscribed = {};\n\n// SCHEMA\n// _subscribed = {\n//     \"foo.bar\": {\n//         MyReactComponent : 2\n//       , SchmoopyPoo      : 1\n//     }\n//   , \"doop.zoop\": {\n//         BusyBox : 1\n//     }\n// }\n\n// <subscriptions>\n//   <namespaces>\n//     <component names> : <subscribed instances>\n\n\nvar SubscriptionsStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function () {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  // SUBSCRIPTIONS\n  , getAllSubscriptions: function () {\n      return _subscribed;\n    }\n\n  , getSubscriptionsByMask: function( mask ) {\n      return _subscribed[ mask ];\n    }\n\n  , getNumberOfSubscriptionsForMask: function( mask ) {\n      var numberSubscribed = 0;\n\n      if ( _.isObject( _subscribed[ mask ] ) ) {\n        _.forEach( _subscribed[ mask ], function( subscribedData ) {\n          if ( typeof subscribedData === \"number\" ) {\n            numberSubscribed += subscribedData;\n          }\n        });\n        return numberSubscribed;\n      } else {\n        return 0;\n      }\n    }\n\n});\n\nSubscriptionsStore.dispatchToken = FreeNASDispatcher.register( function( payload ) {\n  var action = payload.action;\n  var newSubscriptions = {};\n\n  switch( action.type ) {\n\n    // Subscriptions\n    case ActionTypes.SUBSCRIBE_COMPONENT_TO_MASKS:\n      newSubscriptions = _.cloneDeep( _subscribed );\n\n      _.forEach( action.masks, function( mask ) {\n        if ( _.isObject( newSubscriptions[ mask ] ) ) {\n          if ( _.isNumber( newSubscriptions[ mask ][ action.componentID ] ) ) {\n            newSubscriptions[ mask ][ action.componentID ]++;\n          } else {\n            newSubscriptions[ mask ][ action.componentID ] = 1;\n          }\n        } else {\n          newSubscriptions[ mask ] = {};\n          newSubscriptions[ mask ][ action.componentID ] = 1;\n        }\n      });\n\n      _subscribed = newSubscriptions;\n\n      SubscriptionsStore.emitChange();\n      break;\n\n    case ActionTypes.UNSUBSCRIBE_COMPONENT_FROM_MASKS:\n      newSubscriptions = _.cloneDeep( _subscribed );\n\n      _.forEach( action.masks, function( mask ) {\n        if ( _.isObject( newSubscriptions[ mask ] ) ) {\n          if ( newSubscriptions[ mask ][ action.componentID ] <= 1 ) {\n            delete newSubscriptions[ mask ][ action.componentID ];\n          } else {\n            newSubscriptions[ mask ][ action.componentID ]--;\n          }\n        } else {\n          console.warn( \"Tried to unsubscribe from '\" + mask + \"', but Flux store shows no active subscriptions.\");\n        }\n\n        if ( _.isEmpty( newSubscriptions[ mask ] ) ) {\n          delete newSubscriptions[ mask ];\n        }\n      });\n\n      _subscribed = newSubscriptions;\n\n      SubscriptionsStore.emitChange();\n      break;\n\n    case ActionTypes.UNSUBSCRIBE_ALL:\n      // TODO: Should this be the default?\n      _subscribed = newSubscriptions;\n      SubscriptionsStore.emitChange();\n      break;\n\n    default:\n      // No action\n  }\n});\n\nmodule.exports = SubscriptionsStore;\n"]}
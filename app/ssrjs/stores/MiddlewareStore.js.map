{"version":3,"sources":["app/jsx/stores/MiddlewareStore.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;uBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;AAE3D,IAAI,YAAY,GAAG,QAAQ,CAAC;;AAE5B,IAAI,YAAY,GAAM,EAAE,CAAC;AACzB,IAAI,WAAW,GAAO,EAAE,CAAC;AACzB,IAAI,OAAO,GAAW,EAAE,CAAC;AACzB,IAAI,eAAe,GAAG,KAAK,CAAC;AAC5B,IAAI,YAAY,GAAM,CAAC,CAAC;;AAGxB,IAAI,eAAe,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,SAd3B,YAAY,CAc4B,SAAS,EAAE;;AAExD,YAAU,EAAE,oBAAW,SAAS,EAAG;AACjC,QAAI,CAAC,IAAI,CAAE,YAAY,EAAE,SAAS,CAAE,CAAC;GACtC;;AAED,mBAAiB,EAAE,2BAAW,QAAQ,EAAG;AACvC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAW,QAAQ,EAAG;AAC1C,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;;AAAA,IAGD,uBAAuB,EAAE,mCAAY;AACnC,WAAO,YAAY,CAAC;GACrB;;AAED,wBAAsB,EAAE,kCAAY;AAClC,WAAO,WAAW,CAAC;GACpB;;;AAAA,IAGD,YAAY,EAAE,wBAAY;AACxB,WAAO,CAAE,eAAe,EAAE,YAAY,CAAE,CAAC;GAC1C;;;AAAA,IAGD,WAAW,EAAE,uBAAY;AACvB,WAAO,OAAO,CAAC;GAChB;;CAEJ,CAAC,CAAC;;AAEH,eAAe,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAW,OAAO,EAAG;AAC/E,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,UAAS,MAAM,CAAC,IAAI;;AAElB,SAAK,2BAnDA,WAAW,CAmDC,mBAAmB;AAClC,UAAK,MAAM,CAAC,SAAS,KAAK,WAAW,EAAG;AACtC,uBAAe,GAAG,IAAI,CAAC;OACxB,MAAM,IAAK,MAAM,CAAC,SAAS,KAAK,cAAc,EAAG;AAChD,uBAAe,GAAG,KAAK,CAAC;OACzB;AACD,qBAAe,CAAC,UAAU,EAAE,CAAC;AAC7B,YAAM;;AAAA,AAER,SAAK,2BA5DA,WAAW,CA4DC,qBAAqB;AACpC,kBAAY,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1B,qBAAe,CAAC,UAAU,EAAE,CAAC;AAC7B,YAAM;;AAAA,AAER,SAAK,2BAjEA,WAAW,CAiEC,gBAAgB;;;AAG/B,aAAO,CAAC,OAAO,CAAE,MAAM,CAAC,SAAS,CAAE,CAAC;AACpC,qBAAe,CAAC,UAAU,CAAE,QAAQ,CAAE,CAAC;;AAEvC,YAAM;;AAAA,AAER,SAAK,2BAzEA,WAAW,CAyEC,yBAAyB;;;;AAIxC,qBAAe,CAAC,UAAU,EAAE,CAAC;AAC7B,YAAM;;AAAA,AAER,SAAK,2BAhFA,WAAW,CAgFC,oBAAoB;AACnC,kBAAY,GAAG,MAAM,CAAC,QAAQ,CAAC;;AAE/B,qBAAe,CAAC,UAAU,CAAE,UAAU,CAAE,CAAC;AACzC,YAAM;;AAAA,AAER,SAAK,2BAtFA,WAAW,CAsFC,2BAA2B;AAC1C,iBAAW,CAAE,MAAM,CAAC,OAAO,CAAE,GAAG,MAAM,CAAC,OAAO,CAAC;;AAE/C,qBAAe,CAAC,UAAU,CAAE,SAAS,CAAE,CAAC;AACxC,YAAM;;AAAA,AAIR,YAAQ;;GAET;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,eAAe,CAAC","file":"app/jsx/stores/MiddlewareStore.js","sourcesContent":["// Middleware Flux Store\n// =====================\n// Maintain consistent information about the general state of the middleware\n// client, including which channels are connected, pending calls, and blocked operations.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _rpcServices    = [];\nvar _rpcMethods     = {};\nvar _events         = [];\nvar socketConnected = false;\nvar reconnectETA    = 0;\n\n\nvar MiddlewareStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function ( namespace ) {\n      this.emit( CHANGE_EVENT, namespace );\n    }\n\n  , addChangeListener: function ( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function ( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  // RPC\n  , getAvailableRPCServices: function () {\n      return _rpcServices;\n    }\n\n  , getAvailableRPCMethods: function () {\n      return _rpcMethods;\n    }\n\n  // hook to get socket state and time to reconnect if not connected\n  , getSockState: function () {\n      return [ socketConnected, reconnectETA ];\n    }\n\n  // EVENTS\n  , getEventLog: function () {\n      return _events;\n    }\n\n});\n\nMiddlewareStore.dispatchToken = FreeNASDispatcher.register( function ( payload ) {\n  var action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.UPDATE_SOCKET_STATE:\n      if ( action.sockState === \"connected\" ) {\n        socketConnected = true;\n      } else if ( action.sockState === \"disconnected\" ) {\n        socketConnected = false;\n      }\n      MiddlewareStore.emitChange();\n      break;\n\n    case ActionTypes.UPDATE_RECONNECT_TIME:\n      reconnectETA = action.ETA;\n      MiddlewareStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n\n      // Prepend latest event to the front of the array\n      _events.unshift( action.eventData );\n      MiddlewareStore.emitChange( \"events\" );\n\n      break;\n\n    case ActionTypes.LOG_MIDDLEWARE_TASK_QUEUE:\n\n      // TODO: handle task queue\n\n      MiddlewareStore.emitChange();\n      break;\n\n    case ActionTypes.RECEIVE_RPC_SERVICES:\n      _rpcServices = action.services;\n\n      MiddlewareStore.emitChange( \"services\" );\n      break;\n\n    case ActionTypes.RECEIVE_RPC_SERVICE_METHODS:\n      _rpcMethods[ action.service ] = action.methods;\n\n      MiddlewareStore.emitChange( \"methods\" );\n      break;\n\n\n\n    default:\n    // No action\n  }\n});\n\nmodule.exports = MiddlewareStore;\n"]}
{"version":3,"sources":["app/jsx/stores/TasksStore.js"],"names":[],"mappings":"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","file":"app/jsx/stores/TasksStore.js","sourcesContent":["// Tasks Flux Store\n// ================\n// Maintain log of tasks, and their respective status.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _created   = {};\nvar _waiting   = {};\nvar _executing = {};\nvar _finished  = {};\nvar _failed    = {};\nvar _aborted   = {};\n\nvar TasksStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function( namespace ) {\n      this.emit( CHANGE_EVENT, namespace );\n    }\n\n  , addChangeListener: function( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getAllTasks: function () {\n      return {\n          CREATED   : _created\n        , WAITING   : _waiting\n        , EXECUTING : _executing\n        , FINISHED  : _finished\n        , FAILED    : _failed\n        , ABORTED   : _aborted\n      };\n    }\n\n  , getCreatedTasks: function () {\n      return _created;\n    }\n\n  , getWaitingTasks: function () {\n      return _waiting;\n    }\n\n  , getExecutingTasks: function () {\n      return _executing;\n    }\n\n  , getFinishedTasks: function () {\n      return _finished;\n    }\n\n  , getFailedTasks: function () {\n      return _failed;\n    }\n\n  , getAbortedTasks: function () {\n      return _aborted;\n    }\n});\n\nTasksStore.dispatchToken = FreeNASDispatcher.register( function( payload ) {\n\n  var action = payload.action;\n\n  switch( action.type ) {\n\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      if ( action.eventData.args[\"name\"].indexOf(\"task.\") !== -1 ) {\n        var taskArgs = action.eventData.args.args;\n\n        var CREATED   = _created[ taskArgs[\"id\"] ]   || {};\n        var WAITING   = _waiting[ taskArgs[\"id\"] ]   || {};\n        var EXECUTING = _executing[ taskArgs[\"id\"] ] || {};\n\n        switch ( action.eventData.args[\"name\"] ) {\n          case \"task.created\":\n            _created[ taskArgs[\"id\"] ] = taskArgs;\n            break;\n\n          case \"task.updated\":\n            switch( taskArgs[\"state\"] ) {\n\n              case \"WAITING\":\n                _waiting[ taskArgs[\"id\"] ] =\n                  _.merge( CREATED\n                         , taskArgs );\n\n                delete _created[ taskArgs[\"id\"] ];\n                break;\n\n              case \"EXECUTING\":\n                _executing[ taskArgs[\"id\"] ] =\n                  _.merge( CREATED\n                         , WAITING\n                         , taskArgs );\n\n                delete _created[ taskArgs[\"id\"] ];\n                delete _waiting[ taskArgs[\"id\"] ];\n                break;\n\n              case \"FINISHED\":\n                _finished[ taskArgs[\"id\"] ] =\n                  _.merge( CREATED\n                         , WAITING\n                         , EXECUTING\n                         , taskArgs\n                         , { \"percentage\" : 100 } );\n\n                delete _created[ taskArgs[\"id\"] ];\n                delete _waiting[ taskArgs[\"id\"] ];\n                delete _executing[ taskArgs[\"id\"] ];\n                break;\n\n              case \"ABORTED\":\n                _aborted[ taskArgs[\"id\"] ] =\n                  _.merge( CREATED\n                         , WAITING\n                         , EXECUTING\n                         , taskArgs\n                         , { \"percentage\" : taskArgs[\"percentage\"] } );\n                  delete _created[ taskArgs[\"id\"] ];\n                  delete _waiting[ taskArgs[\"id\"] ];\n                  delete _executing[ taskArgs[\"id\"] ];\n                  break;\n\n              case \"FAILED\":\n                _failed[ taskArgs[\"id\"] ] =\n                  _.merge( CREATED\n                         , WAITING\n                         , EXECUTING\n                         , taskArgs\n                         , { \"percentage\" : taskArgs[\"percentage\"] } );\n                  delete _created[ taskArgs[\"id\"] ];\n                  delete _waiting[ taskArgs[\"id\"] ];\n                  delete _executing[ taskArgs[\"id\"] ];\n                  break;\n            }\n\n            break;\n\n          case \"task.progress\":\n            switch( taskArgs[\"state\"] ){\n              case \"WAITING\":\n                _waiting[ taskArgs[\"id\"] ] = _.merge( WAITING, taskArgs );\n                break;\n\n              case \"EXECUTING\":\n                _executing[ taskArgs[\"id\"] ] = _.merge( EXECUTING, taskArgs ) ;\n                break;\n            }\n\n            break;\n        }\n\n        TasksStore.emitChange();\n      }\n      break;\n\n    default:\n      // No action\n  }\n});\n\nmodule.exports = TasksStore;\n"]}
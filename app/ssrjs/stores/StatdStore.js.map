{"version":3,"sources":["app/jsx/stores/StatdStore.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;sBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;AAE3D,IAAI,YAAY,GAAG,QAAQ,CAAC;;AAE5B,IAAI,WAAW,GAAG,EAAE,CAAC;AACrB,IAAI,WAAW,GAAG,EAAE,CAAC;;AAGrB,IAAI,UAAU,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,QAXtB,YAAY,CAWuB,SAAS,EAAE;;AAEnD,YAAU,EAAE,oBAAW,UAAU,EAAG;AAClC,QAAI,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;GAC3B;;AAED,mBAAiB,EAAE,2BAAW,QAAQ,EAAG;AACvC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAW,QAAQ,EAAG;AAC1C,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;AAED,eAAa,EAAE,uBAAW,IAAI,EAAG;AAC/B,WAAO,WAAW,CAAC,IAAI,CAAC,CAAC;GAC1B;;AAED,qBAAmB,EAAE,+BAAY;AAC/B,WAAO,WAAW,CAAC;GACpB;;CAEJ,CAAC,CAAC;;AAEH,UAAU,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAW,OAAO,EAAG;AAC1E,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,UAAS,MAAM,CAAC,IAAI;;AAElB,SAAK,2BArCA,WAAW,CAqCC,uBAAuB;AACtC,UAAK,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,SAAS,EAAG;AAC7C,mBAAW,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;OAChE,MAAM;AACL,mBAAW,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,aAAa,CAAC,OAAO,EAAC,CAAC;OACvF;AACD,gBAAU,CAAC,UAAU,EAAE,CAAC;AACxB,YAAM;;AAAA,AAER,SAAK,2BA9CA,WAAW,CA8CC,gBAAgB;AAC/B,UAAK,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,oBAAE,UAAU,CAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAE,EAAG;AACtF,mBAAW,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;AACpC,kBAAU,CAAC,UAAU,EAAE,CAAC;OACzB;AACD,YAAM;;AAAA,AAER,YAAQ;;GAET;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"app/jsx/stores/StatdStore.js","sourcesContent":["// Widget Data Flux Store\n// ----------------\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _widgetData = {};\nvar _dataUpdate = [];\n\n\nvar StatdStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function ( changeType ) {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function ( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function ( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getWidgetData: function ( name ) {\n      return _widgetData[name];\n    }\n\n  , getWidgetDataUpdate: function () {\n      return _dataUpdate;\n    }\n\n});\n\nStatdStore.dispatchToken = FreeNASDispatcher.register( function ( payload ) {\n  var action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.RECEIVE_RAW_WIDGET_DATA:\n      if ( action.rawWidgetData.data !== undefined ) {\n        _widgetData[action.dataSourceName] = action.rawWidgetData.data;\n      } else {\n        _widgetData[action.dataSourceName] = {error: true, msg: action.rawWidgetData.message};\n      }\n      StatdStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      if ( action.eventData.args && _.startsWith( action.eventData.args[\"name\"], \"statd.\" ) ) {\n        _dataUpdate = action.eventData.args;\n        StatdStore.emitChange();\n      }\n      break;\n\n    default:\n      // No action\n  }\n});\n\nmodule.exports = StatdStore;\n"]}
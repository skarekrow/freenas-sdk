{"version":3,"sources":["app/jsx/stores/GroupsStore.js"],"names":[],"mappings":"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","file":"app/jsx/stores/GroupsStore.js","sourcesContent":["// Groups Flux Store\n// -----------------\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nimport GroupsMiddleware from \"../middleware/GroupsMiddleware\";\n\nvar CHANGE_EVENT = \"change\";\nvar UPDATE_MASK  = \"groups.changed\";\nvar PRIMARY_KEY  = \"id\";\n\nvar _localUpdatePending = {};\nvar _updatedOnServer    = [];\nvar _groups = {};\n\nvar GroupsStore = _.assign( {}, EventEmitter.prototype, {\n\n  emitChange: function () {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function ( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function ( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getUpdateMask: function () {\n      return UPDATE_MASK;\n    }\n\n  , getPendingUpdateIDs: function () {\n      return _updatedOnServer;\n    }\n\n  , isLocalTaskPending: function ( id ) {\n      return _.values( _localUpdatePending ).indexOf( id ) > -1;\n    }\n\n  , isGroupUpdatePending: function ( id ) {\n      return _updatedOnServer.indexOf( id ) > -1;\n    }\n\n  , findGroupByKeyValue: function ( key, value ) {\n      return _.find( _groups, function ( group ) {\n        return group[ key ] === value;\n      });\n    }\n\n  , getGroup: function ( id ) {\n      return _groups[ id ];\n    }\n\n  , getAllGroups: function () {\n      return _.values( _groups );\n    }\n\n});\n\nGroupsStore.dispatchToken = FreeNASDispatcher.register( function ( payload ) {\n  var action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.RECEIVE_GROUPS_LIST:\n\n      var updatedGroupIDs = _.pluck( action.groupsList, PRIMARY_KEY );\n\n      // When receiving new data, we can comfortably resolve anything that may\n      // have had an outstanding update indicated by the Middleware.\n      if ( _updatedOnServer.length > 0 ) {\n        _updatedOnServer = _.difference( _updatedOnServer, updatedGroupIDs );\n      }\n\n      // Updated groups come from the middleware as an array, but we store the\n      // data as an object keyed by the PRIMARY_KEY. Here, we map the changed\n      // groups into the object.\n      action.groupsList.map( function ( group ) {\n        _groups[ group [ PRIMARY_KEY ] ] = group;\n      });\n      GroupsStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      var args = action.eventData.args;\n      var updateData = args[ \"args\" ];\n\n      if ( args[ \"name\" ] === UPDATE_MASK ) {\n        if ( updateData[ \"operation\" ] === \"delete\" ) {\n          _groups = _.omit( _groups, updateData[\"ids\"] );\n        } else if ( updateData[ \"operation\" ] === \"create\"\n                  || updateData[ \"operation\" ] === \"update\" ) {\n          Array.prototype.push.apply( _updatedOnServer, updateData[\"ids\"] );\n          GroupsMiddleware.requestGroupsList( _updatedOnServer );\n        }\n        GroupsStore.emitChange();\n\n      } else if ( args[ \"name\" ] === \"task.updated\"\n                && updateData[\"state\"] === \"FINISHED\" ) {\n        delete _localUpdatePending[ updateData[\"id\"] ];\n      }\n      break;\n\n    case ActionTypes.RECEIVE_GROUP_UPDATE_TASK:\n      _localUpdatePending[ action.taskID ] = action.groupID;\n      GroupsStore.emitChange();\n      break;\n\n    default:\n    // Do Nothing\n  }\n\n});\n\nmodule.exports = GroupsStore;\n"]}
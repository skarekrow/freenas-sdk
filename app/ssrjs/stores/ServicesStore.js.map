{"version":3,"sources":["app/jsx/stores/ServicesStore.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;sBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;4CAE5B,kCAAkC;;;;AAEjE,IAAI,YAAY,GAAG,QAAQ,CAAC;;AAE5B,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,IAAI,wBAAwB,GAAG,EAAE,CAAC;AAClC,IAAI,aAAa,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,QAXzB,YAAY,CAW0B,SAAS,EAAE;;AAExD,YAAU,EAAE,sBAAY;AACpB,QAAI,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;GAC3B;;AAED,mBAAiB,EAAE,2BAAW,QAAQ,EAAG;AACvC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAW,QAAQ,EAAG;AAC1C,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;AAED,uBAAqB,EAAE,+BAAW,GAAG,EAAE,KAAK,EAAG;AAC7C,QAAI,SAAS,GAAG,EAAE,CAAC;AACnB,aAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;;AAEvB,WAAO,oBAAE,IAAI,CAAE,SAAS,EAAE,SAAS,CAAE,CAAC;GACvC;;AAED,gBAAc,EAAE,0BAAY;AAC1B,WAAO,SAAS,CAAC;GAClB;;CAEJ,CAAC,CAAC;;AAEH,aAAa,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAW,OAAO,EAAG;AAC7E,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,UAAS,MAAM,CAAC,IAAI;;AAElB,SAAK,2BAxCA,WAAW,CAwCC,oBAAoB;AACnC,eAAS,GAAG,MAAM,CAAC,WAAW,CAAC;AAC/B,mBAAa,CAAC,UAAU,EAAE,CAAC;AAC3B,YAAM;;AAAA,AAER,SAAK,2BA7CA,WAAW,CA6CC,2BAA2B;AAC1C,8BAAwB,CAAE,MAAM,CAAC,MAAM,CAAE,GAAG,MAAM,CAAC,WAAW,CAAC;AAC/D,mBAAa,CAAC,UAAU,EAAE,CAAC;AAC3B,YAAM;;AAAA,AAER,SAAK,2BAlDA,WAAW,CAkDC,gBAAgB;AAC/B,UAAK,wBAAwB,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAClD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,UAAU,IAC/C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAA,AAAE,EAAG;;;AAG1D,kDAAmB,mBAAmB,EAAE,CAAC;AACzC,4BAAE,MAAM,CAAE,wBAAwB,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAE,CAAC;OACrE;AACD,YAAM;;AAAA,AAER,YAAQ;;GAET;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"app/jsx/stores/ServicesStore.js","sourcesContent":["// Services Flux Store\n// ----------------\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nimport ServicesMiddleware from \"../middleware/ServicesMiddleware\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _services = [];\nvar _scheduledForStateUpdate = {};\nvar ServicesStore = _.assign( {}, EventEmitter.prototype, {\n\n  emitChange: function () {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function ( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function ( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , findServiceByKeyValue: function ( key, value ) {\n      var predicate = {};\n      predicate[key] = value;\n\n      return _.find( _services, predicate );\n    }\n\n  , getAllServices: function () {\n      return _services;\n    }\n\n});\n\nServicesStore.dispatchToken = FreeNASDispatcher.register( function ( payload ) {\n  var action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.RECEIVE_RAW_SERVICES:\n      _services = action.rawServices;\n      ServicesStore.emitChange();\n      break;\n\n    case ActionTypes.RECEIVE_SERVICE_UPDATE_TASK:\n      _scheduledForStateUpdate[ action.taskID ] = action.serviceName;\n      ServicesStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      if ( _scheduledForStateUpdate[action.eventData.args.args.id]\n           && ( action.eventData.args.args.state === \"FINISHED\" ||\n                action.eventData.args.args.state === \"FAILED\" ) ) {\n        // We have final result lets get the new set of services and\n        // clean this task id from _scheduledForStateUpdate\n        ServicesMiddleware.requestServicesList();\n        _.remove( _scheduledForStateUpdate, action.eventData.args.args.id );\n      }\n      break;\n\n    default:\n    // No action\n  }\n});\n\nmodule.exports = ServicesStore;\n"]}
{"version":3,"sources":["app/jsx/stores/UsersStore.js"],"names":[],"mappings":"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","file":"app/jsx/stores/UsersStore.js","sourcesContent":["// Users Flux Store\n// ----------------\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nimport UsersMiddleware from \"../middleware/UsersMiddleware\";\n\nvar CHANGE_EVENT = \"change\";\nvar UPDATE_MASK  = \"users.changed\";\nvar PRIMARY_KEY  = \"id\";\n\nvar _updatedOnServer    = [];\nvar _localUpdatePending = {};\nvar _users              = {};\n\nvar UsersStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function () {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getUpdateMask: function () {\n      return UPDATE_MASK;\n    }\n\n  , getPendingUpdateIDs: function () {\n      return _updatedOnServer;\n    }\n\n  , isLocalTaskPending: function( id ) {\n      return _.values( _localUpdatePending ).indexOf( id ) > -1;\n    }\n\n  , isUserUpdatePending: function( id ) {\n      return _updatedOnServer.indexOf( id ) > -1;\n    }\n\n  , findUserByKeyValue: function ( key, value ) {\n      var predicate = {};\n          predicate[key] = value;\n\n      return _.find( _users, predicate );\n    }\n\n  , getUser: function( id ) {\n      return _users[ id ];\n    }\n\n  , getAllUsers: function () {\n      return _.values( _users );\n    }\n\n// Returns an array of the complete objects for each user in\n// the requested group.\n  , getUsersByGroup: function(groupID) {\n      var groupUsers = _.filter( _users, function ( currentUser ) {\n        if (_.includes(currentUser.groups, groupID) || currentUser.group === groupID){\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return groupUsers;\n  }\n\n});\n\nUsersStore.dispatchToken = FreeNASDispatcher.register( function( payload ) {\n  var action = payload.action;\n\n  switch( action.type ) {\n\n    case ActionTypes.RECEIVE_RAW_USERS:\n\n      var updatedUserIDs = _.pluck( action.rawUsers, PRIMARY_KEY );\n\n      // When receiving new data, we can comfortably resolve anything that may\n      // have had an outstanding update indicated by the Middleware.\n      if ( _updatedOnServer.length > 0 ) {\n        _updatedOnServer = _.difference( _updatedOnServer, updatedUserIDs );\n      }\n\n      action.rawUsers.map( function ( user ) {\n          _users[ user [ PRIMARY_KEY ] ] = user;\n      });\n\n      UsersStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      var args = action.eventData.args;\n      var updateData = args[ \"args\" ];\n\n      // FIXME: This is a workaround for the current implementation of task\n      // subscriptions and submission resolutions.\n      if ( args[ \"name\" ] === UPDATE_MASK ) {\n        if ( updateData[ \"operation\" ] === \"delete\" ) {\n            // FIXME: Will this cause an issue if the delete is unsuccessful?\n            // This will no doubt be overriden in the new patch-based world anyway.\n            _users = _.omit(_users, updateData[\"ids\"] );\n        } else if ( updateData[ \"operation\" ] === \"update\" || updateData[ \"operation\" ] === \"create\" ) {\n            Array.prototype.push.apply( _updatedOnServer, updateData[\"ids\"] );\n            UsersMiddleware.requestUsersList( _updatedOnServer );\n        } else {\n          // TODO: Are there any other cases?\n        }\n        UsersStore.emitChange();\n\n      // TODO: Make this more generic, triage it earlier, create ActionTypes for it\n      } else if ( args[ \"name\" ] === \"task.updated\" && args.args[\"state\"] === \"FINISHED\" ) {\n          delete _localUpdatePending[ args.args[\"id\"] ];\n      }\n\n      break;\n\n    case ActionTypes.RECEIVE_USER_UPDATE_TASK:\n      _localUpdatePending[ action.taskID ] = action.userID;\n      UsersStore.emitChange();\n      break;\n\n    default:\n      // No action\n  }\n});\n\nmodule.exports = UsersStore;\n"]}
{"version":3,"sources":["app/jsx/stores/SystemStore.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;sBACO,QAAQ;;2CAEP,iCAAiC;;;;yCACnC,+BAA+B;;AAE3D,IAAI,YAAY,GAAG,QAAQ,CAAC;;AAE5B,IAAI,eAAe,GAAG,EAAE,CAAC;AACzB,IAAI,iBAAiB,GAAG,EAAE,CAAC;;AAE3B,IAAI,WAAW,GAAG,oBAAE,MAAM,CAAE,EAAE,EAAE,QAVvB,YAAY,CAUwB,SAAS,EAAE;;AAEpD,YAAU,EAAE,oBAAS,UAAU,EAAE;AAC/B,QAAI,CAAC,IAAI,CAAE,YAAY,CAAE,CAAC;GAC3B;;AAED,mBAAiB,EAAE,2BAAU,QAAQ,EAAG;AACtC,QAAI,CAAC,EAAE,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GACnC;;AAED,sBAAoB,EAAE,8BAAU,QAAQ,EAAG;AACzC,QAAI,CAAC,cAAc,CAAE,YAAY,EAAE,QAAQ,CAAE,CAAC;GAC/C;;AAED,eAAa,EAAE,uBAAS,IAAI,EAAE;AAC5B,WAAO,eAAe,CAAC,IAAI,CAAC,CAAC;GAC9B;;AAED,iBAAe,EAAE,yBAAS,IAAI,EAAE;AAC9B,WAAO,iBAAiB,CAAC,IAAI,CAAC,CAAC;GAChC;;CAEJ,CAAC,CAAC;;AAEH,WAAW,CAAC,aAAa,GAAG,yCAAkB,QAAQ,CAAE,UAAU,OAAO,EAAG;AAC1E,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,UAAQ,MAAM,CAAC,IAAI;;AAEjB,SAAK,2BApCA,WAAW,CAoCC,wBAAwB;AACvC,qBAAe,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC;AAC3D,iBAAW,CAAC,UAAU,EAAE,CAAC;AACzB,YAAM;AAAA,AACR,SAAK,2BAxCA,WAAW,CAwCC,0BAA0B;AACzC,uBAAiB,CAAC,MAAM,CAAC,oBAAoB,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;AACrE,iBAAW,CAAC,UAAU,EAAE,CAAC;AACzB,YAAM;;AAAA,AAER,YAAQ;;GAET;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"app/jsx/stores/SystemStore.js","sourcesContent":["// System Flux Store\n// ----------------\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nvar CHANGE_EVENT = \"change\";\n\nvar _systemInfoData = {};\nvar _systemDeviceData = {};\n\nvar SystemStore = _.assign( {}, EventEmitter.prototype, {\n\n    emitChange: function(changeType) {\n      this.emit( CHANGE_EVENT );\n    }\n\n  , addChangeListener: function( callback ) {\n      this.on( CHANGE_EVENT, callback );\n    }\n\n  , removeChangeListener: function( callback ) {\n      this.removeListener( CHANGE_EVENT, callback );\n    }\n\n  , getSystemInfo: function(name) {\n      return _systemInfoData[name];\n    }\n\n  , getSystemDevice: function(name) {\n      return _systemDeviceData[name];\n    }\n\n});\n\nSystemStore.dispatchToken = FreeNASDispatcher.register( function( payload ) {\n  var action = payload.action;\n\n  switch( action.type ) {\n\n    case ActionTypes.RECEIVE_SYSTEM_INFO_DATA:\n      _systemInfoData[action.systemInfoName] = action.systemInfo;\n      SystemStore.emitChange();\n      break;\n    case ActionTypes.RECEIVE_SYSTEM_DEVICE_DATA:\n      _systemDeviceData[action.systemDeviceArgument] = action.systemDevice;\n      SystemStore.emitChange();\n      break;\n\n    default:\n      // No action\n  }\n});\n\nmodule.exports = SystemStore;\n"]}
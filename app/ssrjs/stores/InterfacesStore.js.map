{"version":3,"sources":["app/jsx/stores/InterfacesStore.js"],"names":[],"mappings":"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","file":"app/jsx/stores/InterfacesStore.js","sourcesContent":["// Interfaces Flux Store\n// =====================\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport EventEmitter from \"events\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nimport InterfacesMiddleware from \"../middleware/InterfacesMiddleware\";\n\nconst CHANGE_EVENT = \"change\";\nconst UPDATE_MASK  = \"network.interface.changed\";\n\nvar _updatedOnServer    = [];\nvar _localUpdatePending = {};\nvar _interfaces           = [];\n\nvar InterfacesStore = _.assign( {}, EventEmitter.prototype, {\n\n  emitChange: function () {\n    this.emit( CHANGE_EVENT );\n  }\n\n  , addChangeListener: function ( callback ) {\n    this.on( CHANGE_EVENT, callback );\n  }\n\n  , removeChangeListener: function ( callback ) {\n    this.removeListener( CHANGE_EVENT, callback );\n  }\n\n  , getUpdateMask: function () {\n    return UPDATE_MASK;\n  }\n\n  , getPendingUpdateNames: function () {\n    return _updatedOnServer;\n  }\n\n  // Returns true if the selected interface is in the\n  // list of interfaces with pending updates.\n  , isLocalTaskPending: function ( interfaceName ) {\n      return _.values( _localUpdatePending ).indexof( interfaceName ) > -1;\n    }\n\n  // Returns true if selected interface is in the list of updated interfaces.\n  , isInterfaceUpdatePending: function ( linkAddress ) {\n      return _updatedOnServer.indexof( linkAddress ) > -1;\n    }\n\n  , findInterfaceByKeyValue: function ( key, value ) {\n    // 'interface' is a reserved word. arg renamed 'thisInterface'.\n    return _.find( _interfaces, function ( thisInterface ) {\n      return thisInterface[ key ] === value;\n    });\n  }\n\n  , getInterface: function ( linkAddress ) {\n    return _interfaces[ linkAddress ];\n  }\n\n  , getAllInterfaces: function () {\n    return _interfaces;\n  }\n\n});\n\nInterfacesStore.dispatchToken = FreeNASDispatcher.register( function ( payload ) {\n  let action = payload.action;\n\n  switch ( action.type ) {\n\n    case ActionTypes.RECEIVE_INTERFACES_LIST:\n\n      // Re-map the complex interface objects into flat ones.\n      // TODO: Account for multiple aliases and static configurations.\n      let mapInterface = function ( currentInterface ) {\n\n        let newInterface = {};\n\n        // Make the block below less absurdly wide.\n        let status  = currentInterface.status;\n\n        // Initialize desired fields with existing ones.\n        newInterface[ \"name\" ] = currentInterface[ \"name\" ]\n                               ? currentInterface[ \"name\" ]\n                               : null;\n        newInterface[ \"ip\" ] = status[ \"aliases\" ][1]\n                             ? status[ \"aliases\" ][1][ \"address\" ]\n                             : \"--\";\n        newInterface[ \"link_state\" ] = status[ \"link-state\" ]\n                                     ? status[ \"link-state\" ]\n                                     : null;\n        newInterface[ \"link_address\" ] = status[ \"link-address\" ]\n                                     ? status[ \"link-address\" ]\n                                     : null;\n        newInterface[ \"flags\" ] = status[ \"flags\" ]\n                                ? status[ \"flags\" ]\n                                : [];\n        newInterface[ \"netmask\" ] = status[ \"aliases\" ][1]\n                                  ? status[ \"aliases\" ][1][ \"netmask\" ]\n                                  : null;\n        newInterface[ \"enabled\" ] = currentInterface[ \"enabled\" ]\n                                  ? true\n                                  : false;\n        newInterface[ \"dhcp\" ] = currentInterface[ \"dhcp\" ]\n                               ? true\n                               : false;\n        newInterface[ \"status\" ] = status;\n        newInterface[ \"mtu\" ] = currentInterface[ \"mtu\" ]\n                              ? currentInterface[ \"mtu\" ]\n                              : null;\n\n        // Figure out interface type. Only knows about Ethernet right now.\n        // TODO: There are tons more types that could show up. See:\n        // http://fxr.watson.org/fxr/source/net/if_types.h?v=FREEBSD10\n        // ETHER and FIBRECHANNEL will definitely have different logos.\n        // Many of the others, such as LAPD and CARP will be discarded and only\n        // used by other parts of the UI. The vast majority of that list doesn'\n        // matter.\n        newInterface[ \"type\"] = currentInterface[ \"type\" ] === \"ETHER\"\n                              ? \"Ethernet\"\n                              : \"Unknown\";\n\n        // Determine Internet Protocol version\n        if ( !status[ \"aliases\" ][1] ) {\n          newInterface[ \"ip_version\" ] = \"IP\";\n        } else {\n\n          switch ( status[ \"aliases\" ][1][ \"family\" ] ) {\n\n            case \"INET\":\n              newInterface[ \"ip_version\" ] = \"IPv4\";\n              break;\n\n            case \"INET6\":\n              newInterface[ \"ip_version\" ] = \"IPv6\";\n              break;\n\n            default:\n            // Nothing to do here.\n          }\n        }\n\n        // Map the interface type and/or status to an appropriate icon.\n        // TODO: This also needs to handle other interface types.\n        switch ( newInterface[ \"type\" ] ) {\n\n          // Ethernet gets the FontAwesome \"exchange\" icon for now.\n          // TODO: Other conditions, such as different icons for connected and\n          // disconnected interfaces of different types.\n          case \"Ethernet\":\n            newInterface[ \"font_icon\" ] = \"exchange\";\n            break;\n\n          default:\n            newInterface[ \"icon\" ] = null;\n            break;\n        }\n\n        return newInterface;\n      };\n\n      _interfaces = action.rawInterfacesList.map( mapInterface );\n\n      InterfacesStore.emitChange();\n      break;\n\n    case ActionTypes.MIDDLEWARE_EVENT:\n      let args = action.eventData.args;\n\n      if ( args[\"name\"] === UPDATE_MASK ) {\n        let updateData = args[\"args\"];\n\n        if ( updateData [\"operation\"] === \"update\" ) {\n\n          // Not reall sure this is doing something useful.\n          Array.prototype.push.apply( _updatedOnServer, updateData[\"ids\"] );\n          InterfacesMiddleware.requestInterfacesList( );\n        }\n      }\n\n      InterfacesStore.emitChange();\n      break;\n\n    case ActionTypes.RECEIVE_INTERFACE_CONFIGURE_TASK:\n      _localUpdatePending[ action.taskID ] = action.interfaceName;\n      InterfacesStore.emitChange();\n      break;\n\n    default:\n    // Do nothing\n  }\n});\n\nmodule.exports = InterfacesStore;\n"]}
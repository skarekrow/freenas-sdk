{"version":3,"sources":["app/jsx/actions/MiddlewareActionCreators.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;;;;;;;2CAEiB,iCAAiC;;;;yCACnC,+BAA+B;;IAErD,wBAAwB;WAAxB,wBAAwB;0BAAxB,wBAAwB;;;eAAxB,wBAAwB;;WAEO,qCAAE,WAAW,EAAE,QAAQ,EAAG;AAC3D,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BANL,WAAW,CAMM,iBAAiB;AACnC,mBAAW,EAAE,WAAW;AACxB,gBAAQ,EAAE,QAAQ;OACnB,CACF,CAAC;KACH;;;WAEwB,2BAAE,SAAS,EAAG;AACrC,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BAfL,WAAW,CAeM,mBAAmB;AACrC,iBAAS,EAAE,SAAS;OACrB,CACF,CAAC;KACH;;;WAE0B,6BAAE,GAAG,EAAG;AACjC,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BAvBL,WAAW,CAuBM,qBAAqB;AACvC,WAAG,EAAE,GAAG;OACT,CACF,CAAC;KACH;;;WAEgC,mCAAE,IAAI,EAAG;AACxC,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BA/BL,WAAW,CA+BM,iBAAiB;AACnC,YAAI,EAAE,IAAI;OACX,CACF,CAAC;KACH;;;WAEgC,mCAAE,IAAI,EAAG;AACxC,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BAvCL,WAAW,CAuCM,qBAAqB;AACvC,YAAI,EAAE,IAAI;OACX,CACF,CAAC;KACH;;;WAEuB,0BAAE,SAAS,EAAG;AACpC,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BA/CL,WAAW,CA+CM,gBAAgB;AAClC,iBAAS,EAAE,SAAS;OACrB,CACF,CAAC;KACH;;;WAE+B,kCAAE,QAAQ,EAAG;AAC3C,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BAvDL,WAAW,CAuDM,oBAAoB;AACtC,gBAAQ,EAAE,QAAQ;OACnB,CACF,CAAC;KACH;;;WAEqC,wCAAE,OAAO,EAAE,OAAO,EAAG;AACzD,+CAAkB,sBAAsB,CACtC,EAAE,IAAI,EAAE,2BA/DL,WAAW,CA+DM,2BAA2B;AAC7C,eAAO,EAAE,OAAO;AAChB,eAAO,EAAE,OAAO;OACjB,CACF,CAAC;KACH;;;SAlEG,wBAAwB;;;AAoE7B,CAAC;;qBAEa,wBAAwB","file":"app/jsx/actions/MiddlewareActionCreators.js","sourcesContent":["// Middleware Action Creators\n// ==================================\n// Handle high level Middleware events and actions, handle lifecycle and\n// authentication changes, and call the dispatcher\n\n\"use strict\";\n\nimport FreeNASDispatcher from \"../dispatcher/FreeNASDispatcher\";\nimport { ActionTypes } from \"../constants/FreeNASConstants\";\n\nclass MiddleWareActionCreators {\n\n  static receiveAuthenticationChange ( currentUser, loggedIn ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.UPDATE_AUTH_STATE\n      , currentUser: currentUser\n      , loggedIn: loggedIn\n      }\n    );\n  }\n\n  static updateSocketState ( sockState ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.UPDATE_SOCKET_STATE\n      , sockState: sockState\n      }\n    );\n  }\n\n  static updateReconnectTime ( ETA ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.UPDATE_RECONNECT_TIME\n      , ETA: ETA\n      }\n    );\n  }\n\n  static increaseSubscriptionCount ( mask ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.SUBSCRIBE_TO_MASK\n      , mask: mask\n      }\n    );\n  }\n\n  static decreaseSubscriptionCount ( mask ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.UNSUBSCRIBE_FROM_MASK\n      , mask: mask\n      }\n    );\n  }\n\n  static receiveEventData ( eventData ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.MIDDLEWARE_EVENT\n      , eventData: eventData\n      }\n    );\n  }\n\n  static receiveAvailableServices ( services ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.RECEIVE_RPC_SERVICES\n      , services: services\n      }\n    );\n  }\n\n  static receiveAvailableServiceMethods ( service, methods ) {\n    FreeNASDispatcher.handleMiddlewareAction(\n      { type: ActionTypes.RECEIVE_RPC_SERVICE_METHODS\n      , service: service\n      , methods: methods\n      }\n    );\n  }\n\n};\n\nexport default MiddleWareActionCreators;\n"]}
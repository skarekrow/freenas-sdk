{"version":3,"sources":["app/jsx/components/Viewer.jsx"],"names":[],"mappings":"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","file":"app/jsx/components/Viewer.jsx","sourcesContent":["// VIEWER\n// ======\n// One of the primary display components in FreeNAS. The Viewer is capable of\n// ingesting data sets or collections of \"like\" things, and displaying them in\n// a variety of modes. It is similar in this way to a desktop client's browser\n// window, though not limited to just displaying files.\n\n\"use strict\";\n\nimport React from \"react\";\nimport _ from \"lodash\";\nimport TWBS from \"react-bootstrap\";\n\nimport viewerCommon from \"./mixins/viewerCommon\";\n\nimport Icon from \"./Icon\";\nimport DetailViewer from \"./Viewer/DetailViewer\";\nimport IconViewer from \"./Viewer/IconViewer\";\nimport TableViewer from \"./Viewer/TableViewer\";\n\n\n// Main Viewer Wrapper Component\nconst Viewer = React.createClass(\n\n  { mixins: [ viewerCommon ]\n\n  , contextTypes: { router: React.PropTypes.func }\n\n  , propTypes:\n      { defaultMode: React.PropTypes.string\n      , allowedModes: React.PropTypes.array\n      , inputData: React.PropTypes.array.isRequired\n      , viewData: React.PropTypes.object.isRequired\n      , displayData: React.PropTypes.object\n      }\n\n\n  // REACT LIFECYCLE\n  , getDefaultProps: function () {\n      // Viewer allows all modes by default, except for heirarchical. This list\n      // can be overwritten by passing allowedModes into your <Viewer />.\n      // Allowed modes are:\n      // \"detail\" : Items on left, with properties on right, cnofigurable\n      // \"icon\"   : Items as icons, with properties as modal\n      // \"table\"  : Items as table rows, showing more data\n      // TODO: \"heir\"   : Heirarchical view, shows relationships between items\n      return { allowedModes: [ \"detail\", \"icon\", \"table\" ] };\n    }\n\n  , getInitialState: function () {\n      const VIEWDATA = this.props.viewData;\n      // render will always use currentMode - in an uninitialized Viewer, the\n      // mode will not have been set, and should therefore come from either a\n      // passed in currentMode or defaultMode, falling back to getDefaultProps\n      const INITIALMODE = ( this.props.currentMode ||\n                            this.props.defaultMode ||\n                            \"detail\"\n                          );\n\n      // Generate an array of keys which TableViewer can use to quickly generate\n      // its internal structure by looping through the returned data from the\n      // middleware and creating cells. Also useful for getting human-friendly\n      // names out of the translation key.\n      let defaultTableCols = [];\n      let currentParams = this.context.router.getCurrentParams();\n      let selectedItem = currentParams[ VIEWDATA.routing[\"param\"] ];\n\n      _.filter( VIEWDATA.format.dataKeys\n              , function ( item, key, collection ) {\n                  if ( item[\"defaultCol\"] ) {\n                    defaultTableCols.push( item[\"key\"] );\n                  }\n                }\n              );\n\n      if ( !_.isNumber( selectedItem ) && !_.isString( selectedItem ) ) {\n        selectedItem = null;\n      }\n\n      return (\n        { currentMode: this.changeViewerMode( INITIALMODE )\n        , tableCols: defaultTableCols\n        , enabledGroups: VIEWDATA.display.defaultGroups.length\n                       ? VIEWDATA.display.defaultGroups\n                       : null\n        , enabledFilters: VIEWDATA.display.defaultFilters.length\n                        ? VIEWDATA.display.defaultFilters\n                        : null\n        , filteredData: { grouped: false\n                        , groups: []\n                        , remaining: { entries: [] }\n                        }\n        , searchString: \"\"\n        , selectedItem: selectedItem\n        }\n      );\n    }\n\n  , componentWillReceiveProps: function ( nextProps ) {\n      this.processDisplayData({ inputData: nextProps.inputData });\n    }\n\n\n  // VIEWER DATA HANDLING\n\n    // processDisplayData applys filters, searches, and then groups before\n    // handing the data to any of its sub-views. The structure is deliberately\n    // generic so that any sub-view may display the resulting data as it\n    // sees fit.\n  , processDisplayData: function ( options ) {\n      const VIEWDATA = this.props.viewData;\n\n      let displayParams =\n        { inputData: this.props.inputData\n        , searchString: this.state.searchString\n        , enabledGroups: this.state.enabledGroups\n        , enabledFilters: this.state.enabledFilters\n        };\n\n      _.assign( displayParams, options );\n\n      // Prevent function from modifying nextProps\n      let inputDataArray = _.cloneDeep( displayParams.inputData );\n      let filteredData = { grouped: false\n                         , groups: []\n                         , remaining: {}\n                         , rawList: []\n                         };\n\n\n      // Reduce the array by applying exclusion filters (defined in the view)\n      // TODO: Debug this - doesn't work right!\n      if ( displayParams.enabledFilters ) {\n        displayParams.enabledFilters.map(\n          function ( filter ) {\n            _.remove( inputDataArray\n                    , VIEWDATA.display.filterCriteria[ filter ].testProp\n                    );\n          }.bind( this )\n        );\n      }\n\n\n      // Reduce the array to only items which contain a substring match for the\n      // searchString in either their primary or secondary keys\n      inputDataArray =\n        _.filter( inputDataArray\n                , function ( item ) {\n                    // TODO: Are keys always strings? May want to rethink this\n                    let searchString = displayParams.searchString.toLowerCase();\n\n                    let searchTarget = item[ VIEWDATA.format.primaryKey ] +\n                                       item[ VIEWDATA.format.secondaryKey ] ||\n                                       \"\";\n\n                    return (\n                      _.includes( searchTarget.toLowerCase()\n                                , searchString\n                                )\n                    );\n                  }\n                );\n\n      // At this point, inputDataArray is an ungrouped (but filtered) list of\n      // items, useful for views like the table.\n      filteredData[\"rawList\"] = _.clone( inputDataArray );\n\n\n      // Convert array into object based on groups\n      if ( displayParams.enabledGroups.length ) {\n        displayParams.enabledGroups.map(\n          function ( group ) {\n            let groupData  = VIEWDATA.display.filterCriteria[ group ];\n            let newEntries = _.remove( inputDataArray, groupData.testProp );\n\n            filteredData.groups.push(\n              { name: groupData.name\n              , key: group\n              , entries: newEntries\n              }\n            );\n          }\n        );\n\n        filteredData[\"grouped\"] = true;\n      } else {\n        filteredData[\"grouped\"] = false;\n      }\n\n\n      // All remaining items are put in the \"remaining\" property\n      filteredData[\"remaining\"] =\n        { name: filteredData[\"grouped\"]\n              ? VIEWDATA.display[\"remainingName\"]\n              : VIEWDATA.display[\"ungroupedName\"]\n        , entries: inputDataArray\n        };\n\n      this.setState(\n        { filteredData: filteredData\n        , searchString: displayParams.searchString\n        , enabledGroups: displayParams.enabledGroups\n        , enabledFilters: displayParams.enabledFilters\n        }\n      );\n    }\n\n  , handleItemSelect: function ( selectionValue, event ) {\n      let newSelection = null;\n\n      if ( !_.isNumber( selectionValue ) || !_.isString( selectionValue ) ) {\n        newSelection = selectionValue;\n      }\n\n      this.setState({ selectedItem: newSelection });\n    }\n\n  , handleSearchChange: function ( event ) {\n      this.processDisplayData({ searchString: event.target.value });\n    }\n\n  , changeViewerMode: function ( targetMode ) {\n      let newMode;\n\n      // See if a disallowed mode has been requested\n      if ( _.includes( this.props.allowedModes, targetMode ) ) {\n        newMode = targetMode;\n      } else {\n        if ( this.props.defaultMode ) {\n          // Use the default mode, if provided\n          newMode = this.props.defaultMode;\n        } else {\n          // If no default, use the first allowed mode in the list\n          newMode = this.props.allowedModes[0];\n        }\n      }\n\n      // When changing viewer modes, close any previously open items.\n      // TODO: This may need to change with single-click select functionality.\n      this.returnToViewerRoot();\n\n      return newMode;\n    }\n\n  , handleModeSelect: function ( selectedKey, foo, bar ) {\n      this.setState({ currentMode: this.changeViewerMode( selectedKey ) });\n    }\n\n  , changeTargetItem: function ( params ) {\n      // Returns the first object from the input array whose selectionKey\n      // matches the current route's dynamic portion. For instance,\n      // \"/accounts/users/root\" with \"bsdusr_usrname\" as the selectionKey would\n      // match the first object in inputData whose username === \"root\"\n      return _.find( this.props.inputData\n                   , function ( item ) {\n                       return (\n                         params[ this.props.viewData.routing[\"param\"] ] ===\n                         item[ this.props.viewData.format[\"selectionKey\"] ]\n                       );\n                     }.bind( this )\n                   );\n    }\n\n\n  // VIEWER DISPLAY\n  , createModeNav: function ( mode, index ) {\n      var modeIcons = { detail: \"th-list\"\n                      , icon: \"th\"\n                      , table: \"align-justify\"\n                      , heir: \"bell\"\n                      };\n\n      return (\n        <TWBS.Button\n          onClick = { this.handleModeSelect.bind( this, mode ) }\n          key = { index }\n          bsStyle = { ( mode === this.state.currentMode )\n                    ? \"info\"\n                    : \"default\"\n                    }\n          active = { false } >\n          <Icon glyph = { modeIcons[ mode ] } />\n        </TWBS.Button>\n      );\n    }\n\n  , createViewerContent: function () {\n      let ViewerContent = null;\n\n      switch ( this.state.currentMode ) {\n        default:\n        case \"detail\":\n          ViewerContent = DetailViewer;\n          break;\n\n        case \"icon\":\n          ViewerContent = IconViewer;\n          break;\n\n        case \"table\":\n          ViewerContent = TableViewer;\n          break;\n\n        case \"heir\":\n          // TODO: Heirarchical Viewer\n          break;\n      }\n\n      return <ViewerContent\n                viewData = { this.props.viewData }\n                inputData = { this.props.inputData }\n                tableCols = { this.state.tableCols }\n                handleItemSelect = { this.handleItemSelect }\n                selectedItem = { this.state.selectedItem }\n                searchString = { this.state.searchString }\n                filteredData = { this.state.filteredData } />;\n    }\n\n  , render: function () {\n      var viewerModeNav = null;\n\n      // Create navigation mode icons\n      if ( this.props.allowedModes.length > 1 ) {\n        viewerModeNav = (\n          <TWBS.ButtonGroup\n            className = \"navbar-btn navbar-right\"\n            activeMode = { this.state.currentMode } >\n            { this.props.allowedModes.map( this.createModeNav ) }\n          </TWBS.ButtonGroup>\n        );\n      }\n\n      return (\n        <div className=\"viewer\">\n          <TWBS.Navbar fluid className=\"viewer-nav\">\n            {/* Searchbox for Viewer (1) */}\n            <TWBS.Input type = \"text\"\n                        placeholder = \"Search\"\n                        value = { this.state.searchString }\n                        groupClassName = \"navbar-form navbar-left\"\n                        onChange = { this.handleSearchChange }\n                        addonBefore = { <Icon glyph =\"search\" /> } />\n\n            {/* Select view mode (3) */}\n            { viewerModeNav }\n\n          </TWBS.Navbar>\n\n          { this.createViewerContent() }\n        </div>\n      );\n    }\n\n});\n\nexport default Viewer;\n"]}
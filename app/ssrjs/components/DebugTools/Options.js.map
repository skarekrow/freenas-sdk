{"version":3,"sources":["app/jsx/components/DebugTools/Options.jsx"],"names":[],"mappings":"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","file":"app/jsx/components/DebugTools/Options.jsx","sourcesContent":["// Option Flags Debug Tab\n// ======================\n\n\"use strict\";\n\nimport React from \"react\";\nimport TWBS from \"react-bootstrap\";\n\nimport ToggleSwitch from \"../common/ToggleSwitch\";\n\nvar Options = React.createClass({\n\n    getInitialState: function () {\n      return {\n        MIDDLEWARE_CLIENT_DEBUG: {\n            connection     : false\n          , authentication : false\n          , packing        : false\n          , logging        : false\n          , queues         : false\n          , subscriptions  : false\n          , messages       : false\n        }\n      };\n    }\n\n  , componentDidMount: function () {\n      window.DEBUG_FLAGS = this.state;\n    }\n\n  , componentWillUnmount: function () {\n      window.DEBUG_FLAGS = null;\n    }\n\n  , componentDidUpdate: function(prevProps, prevState) {\n      window.DEBUG_FLAGS = this.state;\n    }\n\n  , handleFlagToggle: function( flag ) {\n      var tempFlags = this.state.MIDDLEWARE_CLIENT_DEBUG;\n\n      tempFlags[ flag ] = !tempFlags[ flag ];\n\n      this.setState({\n          MIDDLEWARE_CLIENT_DEBUG: tempFlags\n      });\n    }\n\n  , createMiddlewareFlag: function( flag, label, description ) {\n      return (\n        <TWBS.Row>\n          <TWBS.Col xs={3} className=\"text-center\">\n            <h6>{ label }</h6>\n            <ToggleSwitch\n              sm\n              toggled   = { this.state.MIDDLEWARE_CLIENT_DEBUG[ flag ] }\n              onChange  = { this.handleFlagToggle.bind( null, flag ) } />\n          </TWBS.Col>\n\n          <TWBS.Col xs={9} className=\"debug-options-label\">\n            <p>{ description }</p>\n          </TWBS.Col>\n        </TWBS.Row>\n      );\n    }\n\n  , render: function () {\n\n      return (\n        <div className=\"debug-content-flex-wrapper debug-options\">\n\n          <TWBS.Col xs={6} className=\"debug-column\" >\n\n            <h5 className=\"debug-heading\">Middleware Debug Message Flags</h5>\n            <div className=\"debug-column-content well well-sm\">\n              { this.createMiddlewareFlag(\n                    \"connection\"\n                  , \"Middleware Connection\"\n                  , \"Events and information about the state of all clients' connections to the FreeNAS Middleware Server, including disconnection events.\"\n              ) }\n              <hr />\n              { this.createMiddlewareFlag(\n                    \"authentication\"\n                  , \"Client Authentication\"\n                  , \"Events regarding the authentication status of connected clients.\"\n              ) }\n              <hr />\n              { this.createMiddlewareFlag(\n                    \"packing\"\n                  , \"Request Packing\"\n                  , \"'Packing' is the process of encoding a JSON-formatted object to send to the Middleware Server. Includes the resulting pack, or an error dump outlining reasons for an encoding failure.\"\n              ) }\n              <hr />\n              { this.createMiddlewareFlag(\n                    \"logging\"\n                  , \"Pending and Logged Requests\"\n                  , \"A 'logged' request is a middleware request that was sent to the server, stored in the private `pendingRequests` object. These are eventually resolved and removed, either by a response from the server, or a timeout.\"\n              ) }\n              <hr />\n              { this.createMiddlewareFlag(\n                    \"queues\"\n                  , \"Queued Requests\"\n                  , \"Many views' lifecycle will make a request before the connection is made, and before the login credentials have been accepted. These requests are enqueued by the `login` and `request` functions into the `queuedActions` object and `queuedLogin`, and then are dequeued once a valid authorization event has occurred.\"\n              ) }\n              <hr />\n              { this.createMiddlewareFlag(\n                    \"subscriptions\"\n                  , \"Subscription Events\"\n                  , \"Subscribe and unsubscribe events, as well as information about the logged number of active subscriptions, and their trends.\"\n              ) }\n              <hr />\n              { this.createMiddlewareFlag(\n                    \"messages\"\n                  , \"Message Events\"\n                  , \"General message events from the Middleware Server.\"\n              ) }\n            </div>\n\n          </TWBS.Col>\n\n          <TWBS.Col xs={6} className=\"debug-column\" >\n\n            {/* TODO: Should something go here? */}\n\n          </TWBS.Col>\n        </div>\n      );\n    }\n\n});\n\nmodule.exports = Options;\n"]}
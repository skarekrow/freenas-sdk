{"version":3,"sources":["app/jsx/components/DebugTools/Terminal.jsx"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;qBAEK,OAAO;;;;8BACR,iBAAiB;;;;yCAEN,kCAAkC;;;;2BAE5C,iBAAiB;;;;AAEnC,IAAI,QAAQ,GAAG,mBAAM,WAAW,CAAC;;;AAE7B,iBAAe,EAAE,2BAAY;AAC3B,WAAO;AACH,kBAAY,EAAG,SAAS;AACxB,YAAM,EAAS,EAAE;KACpB,CAAC;GACH;;AAED,mBAAiB,EAAE,6BAAY;AAC7B,2CAAgB,sBAAsB,CAAE,CAAA,UAAU,MAAM,EAAG;AACzD,UAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;KACnC,CAAA,CAAC,IAAI,CAAE,IAAI,CAAE,CAAE,CAAC;GAClB;;AAED,mBAAiB,EAAE,2BAAU,KAAK,EAAG;AACnC,QAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;GACxC;;AAED,qBAAmB,EAAE,6BAAU,KAAK,EAAE,KAAK,EAAG;AAC5C,WACE;AAAC,kCAAK,QAAQ;;AACV,eAAO,EAAK,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAE,IAAI,EAAE,KAAK,CAAE,AAAE;AACxD,WAAG,EAAS,KAAK,AAAE;MACnB,KAAK;KACO,CAChB;GACH;;AAED,QAAM,EAAE,kBAAY;AAClB,WACE;;QAAK,SAAS,EAAC,4BAA4B;MAEzC;AAAC,oCAAK,GAAG;UAAC,EAAE,EAAE,CAAC,AAAC,EAAC,SAAS,EAAC,cAAc;QAEvC;;YAAI,SAAS,EAAC,eAAe;UAAE,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;SAAO;QACjF,6DAAO,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,YAAY,AAAE,GAAG;OAEtC;MAEX;AAAC,oCAAK,GAAG;UAAC,EAAE,EAAE,CAAC,AAAC,EAAC,SAAS,EAAC,cAAc;QAEvC;;YAAK,SAAS,EAAC,sBAAsB;UACnC;;cAAI,SAAS,EAAC,eAAe;;WAAsB;UACnD;;;YACE;;gBAAO,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,AAAC;;aAAoB;YAC1D;AAAC,0CAAK,cAAc;gBAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,YAAY,AAAE;cACpE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAE,IAAI,CAAC,mBAAmB,CAAE;aAC/B;WAClB;UAEN,4CAAM;UAEN;;cAAI,SAAS,EAAC,eAAe;;WAA0B;UACvD;;;;WAA2I;UAE3I;;;;YAAuF;;;;aAAmB;;YAAQ;;;;aAAmB;;YAA8B;;;;aAAmB;;YAAiB;;;;aAAc;;YAA8D;;;;aAAc;;YAAK;;;;aAAkB;;YAA4B;;;;aAAiB;;YAA+C;;;;aAAmB;;WAAa;UAEpb;;;YAAG;;;;aAAmB;;YAAsB;;;;aAAmB;;YAA4D;;;;aAAc;;WAAuG;UAEhP;;;;YAAS;;;;aAAmB;;YAA8K;;;;aAA4B;;YAAM;;;;aAA4B;;WAAiB;UAEzR;;;;YAA2B;;;;aAAiB;;YAAO;;;;aAA0B;;WAAW;SACpF;OAEG;KACP,CACN;GACH;;CAEJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"app/jsx/components/DebugTools/Terminal.jsx","sourcesContent":["// Terminal Tab\n// ============\n\n\"use strict\";\n\nimport React from \"react\";\nimport TWBS from \"react-bootstrap\";\n\nimport ShellMiddleware from \"../../middleware/ShellMiddleware\";\n\nimport Shell from \"../common/Shell\";\n\nvar Terminal = React.createClass({\n\n    getInitialState: function () {\n      return {\n          currentShell : \"/bin/sh\"\n        , shells       : []\n      };\n    }\n\n  , componentDidMount: function () {\n      ShellMiddleware.requestAvailableShells( function( shells ) {\n        this.setState({ shells: shells });\n      }.bind( this ) );\n    }\n\n  , handleShellSelect: function( shell ) {\n      this.setState({ currentShell: shell });\n    }\n\n  , createShellMenuItem: function( shell, index ) {\n      return (\n        <TWBS.MenuItem\n            onClick = { this.handleShellSelect.bind( null, shell ) }\n            key     = { index }>\n          { shell }\n        </TWBS.MenuItem>\n      );\n    }\n\n  , render: function () {\n      return (\n        <div className=\"debug-content-flex-wrapper\">\n\n          <TWBS.Col xs={6} className=\"debug-column\" >\n\n            <h5 className=\"debug-heading\">{\"FreeNAS Shell: \" + this.state.currentShell }</h5>\n            <Shell shellType={ this.state.currentShell } />\n\n          </TWBS.Col>\n\n          <TWBS.Col xs={6} className=\"debug-column\" >\n\n            <div className=\"debug-column-content\">\n              <h5 className=\"debug-heading\">Terminal Options</h5>\n              <div>\n                <label style={{ marginRight: \"10px\" }}>Shell Type:</label>\n                <TWBS.DropdownButton bsStyle=\"default\" title={ this.state.currentShell }>\n                  { this.state.shells.map( this.createShellMenuItem ) }\n                </TWBS.DropdownButton>\n              </div>\n\n              <hr />\n\n              <h5 className=\"debug-heading\">Term.js Instructions</h5>\n              <p>While term.js has always supported copy/paste using the mouse, it now also supports several keyboard based solutions for copy/paste.</p>\n\n              <p>term.js includes a tmux-like selection mode which makes copy and paste very simple. <code>Ctrl-A</code> enters <code>prefix</code> mode, from here you can type <code>Ctrl-V</code> to paste. Press <code>[</code> in prefix mode to enter selection mode. To select text press <code>v</code> (or <code>space</code>) to enter visual mode, use <code>hjkl</code> to navigate and create a selection, and press <code>Ctrl-C</code> to copy.</p>\n\n              <p><code>Ctrl-C</code> (in visual mode) and <code>Ctrl-V</code> (in prefix mode) should work in any OS for copy and paste. <code>y</code> (in visual mode) will work for copying only on X11 systems. It will copy to the primary selection.</p>\n\n              <p>Note: <code>Ctrl-C</code> will also work in prefix mode for the regular OS/browser selection. If you want to select text with your mouse and copy it to the clipboard, simply select the text and type <code>Ctrl-A + Ctrl-C</code>, and <code>Ctrl-A + Ctrl-V</code> to paste it.</p>\n\n              <p>For Mac users: Consider <code>Ctrl</code> to be <code>Command/Apple</code> above.</p>\n            </div>\n\n          </TWBS.Col>\n        </div>\n      );\n    }\n\n});\n\nmodule.exports = Terminal;\n"]}
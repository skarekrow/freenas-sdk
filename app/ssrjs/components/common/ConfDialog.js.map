{"version":3,"sources":["app/jsx/components/common/ConfDialog.jsx"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;qBAEK,OAAO;;;;;;8BAGR,iBAAiB;;;;AAElC,IAAI,UAAU,GAAG,mBAAM,WAAW,CAEhC;;AAAE,WAAS,EAAE,EAAE,OAAO,EAAY,mBAAM,SAAS,CAAC,KAAK,CAAE,CAAE,SAAS,EACT,MAAM,EACN,QAAQ,EACR,SAAS,EACT,SAAS,CAAE,CAAE;AACzD,cAAU,EAAS,mBAAM,SAAS,CAAC,MAAM;AACzC,YAAQ,EAAW,mBAAM,SAAS,CAAC,MAAM;AACzC,iBAAa,EAAM,mBAAM,SAAS,CAAC,MAAM;AACzC,kBAAc,EAAK,mBAAM,SAAS,CAAC,MAAM;AACzC,kBAAc,EAAK,mBAAM,SAAS,CAAC,IAAI;AACvC,aAAS,EAAU,mBAAM,SAAS,CAAC,MAAM;AACzC,YAAQ,EAAW,mBAAM,SAAS,CAAC,IAAI,CAAC,UAAU;AAClD,YAAQ,EAAW,mBAAM,SAAS,CAAC,IAAI,CAAC,UAAU;GAC5D;;AAEH,QAAM,EAAE,CAAE,4BAAK,YAAY,CAAE;;AAE7B,iBAAe,EAAE,2BAAa;AAC5B,WAAO,EAAE,OAAO,EAAU,SAAS;AAC1B,WAAK,EAAY,cAAc;AAC/B,eAAS,EAAQ,KAAK;AACtB,eAAS,EAAQ,EAAE;AACnB,cAAQ,EAAS,+CAA+C;AAChE,mBAAa,EAAI,QAAQ;AACzB,oBAAc,EAAG,KAAK;KAC9B,CAAC;GACH;;AAED,iBAAe,EAAE,2BAAa;AAC5B,WAAO;AACL,iBAAW,EAAE,KAAK;KACnB,CAAC;GACH;;AAED,cAAY,EAAE,wBAAY;AACxB,QAAI,CAAC,QAAQ,CAAC;AACZ,iBAAW,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW;KACrC,CAAC,CAAC;GACJ;;;;AAAA,IAID,MAAM,EAAE,kBAAY;AAClB,WACE;;QAAM,OAAO,EAAE,IAAI,CAAC,YAAY,AAAC;MAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ;KACf,CACP;GACH;;AAED,WAAS,EAAE,qBAAY;AACnB,QAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;AACtB,QAAI,CAAC,YAAY,EAAE,CAAC;GACrB;;AAEH,eAAa,EAAE,yBAAY;AACzB,QAAK,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAG;AAC7B,aAAO,8CAAO,CAAC;KAChB;;AAED,WACE;AAAC,kCAAK,KAAK;mBAAK,IAAI,CAAC,KAAK,IAAE,aAAa,EAAE,IAAI,CAAC,YAAY,AAAC;MAC3D;;UAAK,SAAS,EAAC,YAAY;QACzB;;;UAAM,IAAI,CAAC,KAAK,CAAC,QAAQ;SAAO;OAC5B;MACN;;UAAK,SAAS,EAAC,cAAc;QAC3B;AAAC,sCAAK,MAAM;YAAC,OAAO,EAAG,IAAI,CAAC,YAAY,AAAE;UACtC,IAAI,CAAC,KAAK,CAAC,aAAa;SACd;QACd;AAAC,sCAAK,MAAM;YAAC,OAAO,EAAC,SAAS,EAAC,OAAO,EAAG,IAAI,CAAC,SAAS,AAAE;UACrD,IAAI,CAAC,KAAK,CAAC,cAAc;SACf;OACV;KACK,CACX;GACL;CACF,CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"app/jsx/components/common/ConfDialog.jsx","sourcesContent":["// Generic Confirmation Dialog Box\n// ===============================\n// General purpose confirmation dialog, it can be used by any view/button that\n// should require a confirmation\n// (Yes/No/Close etc.) before the actual thing happening\n// TODO: Give it a .less file for giving it custom themes\n\n\"use strict\";\n\nimport React from \"react\";\n\n// Twitter Bootstrap React Components\nimport TWBS from \"react-bootstrap\";\n\nvar ConfDialog = React.createClass(\n\n  { propTypes: { bsStyle          : React.PropTypes.oneOf( [ \"primary\"\n                                                           , \"info\"\n                                                           , \"danger\"\n                                                           , \"warning\"\n                                                           , \"success\" ] )\n               , modalTitle       : React.PropTypes.string\n               , bodyText         : React.PropTypes.string\n               , footerLeftBtn    : React.PropTypes.string\n               , footerRightBtn   : React.PropTypes.string\n               , modalAnimation   : React.PropTypes.bool\n               , className        : React.PropTypes.string\n               , callFunc         : React.PropTypes.func.isRequired\n               , dataText         : React.PropTypes.node.isRequired\n      }\n\n  , mixins: [ TWBS.OverlayMixin ]\n\n  , getDefaultProps: function ( ) {\n      return { bsStyle        : \"primary\"\n             , title          : \"Confirmation\"\n             , animation      : false\n             , className      : \"\"\n             , bodyText       : \"Are you sure you want to perform this Action?\"\n             , footerLeftBtn  : \"Cancel\"\n             , footerRightBtn : \"Yes\"\n      };\n    }\n\n  , getInitialState: function ( ) {\n      return {\n        isModalOpen: false\n      };\n    }\n\n  , handleToggle: function () {\n      this.setState({\n        isModalOpen: !this.state.isModalOpen\n      });\n    }\n\n  // TODO: Make the this.props.dataText's onClick function\n  // more elegant.\n  , render: function () {\n      return (\n        <span onClick={this.handleToggle}>\n          {this.props.dataText}\n        </span>\n      );\n    }\n\n  , saveClick: function () {\n        this.props.callFunc();\n        this.handleToggle();\n      }\n\n  , renderOverlay: function () {\n      if ( !this.state.isModalOpen ) {\n        return <span/>;\n      }\n\n      return (\n        <TWBS.Modal {...this.props} onRequestHide={this.handleToggle}>\n          <div className=\"modal-body\">\n            <h4>{ this.props.bodyText }</h4>\n          </div>\n          <div className=\"modal-footer\">\n            <TWBS.Button onClick={ this.handleToggle }>\n              { this.props.footerLeftBtn }\n            </TWBS.Button>\n            <TWBS.Button bsStyle=\"primary\" onClick={ this.saveClick }>\n              { this.props.footerRightBtn }\n            </TWBS.Button>\n          </div>\n        </TWBS.Modal>\n        );\n    }\n  }\n);\n\nmodule.exports = ConfDialog;\n"]}
{"version":3,"sources":["app/jsx/components/mixins/routerShim.jsx"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;qBACJ,OAAO;;;;AAEzB,MAAM,CAAC,OAAO,GAAG;;AAEb,cAAY,EAAE;AACZ,UAAM,EAAE,mBAAM,SAAS,CAAC,IAAI;GAC7B;;AAED,eAAa,EAAE,uBAAU,KAAK,EAAG;AAC/B,QAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;AAE7B,WAAO,oBAAE,QAAQ,CAAE,EAAE,CAAC,kBAAkB,EAAE,EAAE,KAAK,CAAE,CAAC;GACrD;;AAED,SAAO,EAAE,iBAAU,KAAK,EAAG;AACzB,QAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;AAE7B,WAAO,EAAE,CAAC,kBAAkB,EAAE,KAAK,KAAK,CAAC;GAC1C;;AAED,uBAAqB,EAAE,+BAAU,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAG;AAC7D,QAAI,EAAE,GAAW,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACrC,QAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;AACxC,QAAI,cAAc,CAAC;;AAEnB,YAAQ,UAAU;AAChB,WAAK,SAAS,CAAC;AACf,WAAK,IAAI;AACP,sBAAc,GAAG,IAAI,CAAC,OAAO,CAAE,SAAS,CAAE,CAAC;AAC3C,cAAM;;AAAA,AAER,WAAK,eAAe,CAAC;AACrB,WAAK,UAAU;AACb,sBAAc,GAAG,IAAI,CAAC,aAAa,CAAE,SAAS,CAAE,CAAC;AACjD,cAAM;;AAAA,AAER;AACE,sBAAc,GAAG,IAAI,CAAC,aAAa,CAAE,SAAS,CAAE,CAAC;AACjD,cAAM;AAAA,KACT;;AAED,QAAK,cAAc,EAAG;AACpB,QAAE,CAAC,WAAW,CAAE,MAAM,CAAE,CAAC;KAC1B;GACF;;AAED,iBAAe,EAAE,2BAAY;AAC3B,QAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;AAE7B,WAAO,EAAE,CAAC,gBAAgB,EAAE,CAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAE,CAAC;GACtE;;CAEJ,CAAC","file":"app/jsx/components/mixins/routerShim.jsx","sourcesContent":["// ROUTER SHIM\n// ===========\n// Helper mixins designed to shim react-router with some helpful functionality.\n// Offers simple getter and redirect methods based on simple, semantic\n// expressions.\n\n\"use strict\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\n\nmodule.exports = {\n\n    contextTypes: {\n      router: React.PropTypes.func\n    }\n\n  , routeEndsWith: function( route ) {\n      var rc = this.context.router;\n\n      return _.endsWith( rc.getCurrentPathname(), route );\n    }\n\n  , routeIs: function( route ) {\n      var rc = this.context.router;\n\n      return rc.getCurrentPathname() === route;\n    }\n\n  , calculateDefaultRoute: function( testRoute, target, testType ) {\n      var rc         = this.context.router;\n      var testString = testType.toLowerCase();\n      var shouldRedirect;\n\n      switch( testString ) {\n        case \"routeis\":\n        case \"is\":\n          shouldRedirect = this.routeIs( testRoute );\n          break;\n\n        case \"routeendswith\":\n        case \"endswith\":\n          shouldRedirect = this.routeEndsWith( testRoute );\n          break;\n\n        default:\n          shouldRedirect = this.routeEndsWith( testRoute );\n          break;\n      }\n\n      if ( shouldRedirect ) {\n        rc.replaceWith( target );\n      }\n    }\n\n  , getDynamicRoute: function () {\n      var rc = this.context.router;\n\n      return rc.getCurrentParams()[ this.props.viewData.routing[\"param\"] ];\n    }\n\n};\n"]}
{"version":3,"sources":["app/jsx/components/mixins/groupMixins.jsx"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;iCAEE,0BAA0B;;;;0CACrB,mCAAmC;;;;AAEhE,MAAM,CAAC,OAAO,GAAG;;AAEb,mBAAiB,EAAE,6BAAW;AAC5B,mCAAY,iBAAiB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;GAC7D;;AAED,sBAAoB,EAAE,gCAAY;AAChC,mCAAY,oBAAoB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;GAChE;;AAED,yBAAuB,EAAE,mCAAW;AAClC,QAAI,UAAU,GAAG,+BAAY,YAAY,EAAE,CAAC;AAC5C,QAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,UAAU,EAAC,CAAC,CAAC;GAC1C;;;AAAA,IAGD,UAAU,EAAE,sBAAY;AACtB,QAAI,MAAM,GAAG,EAAE,CAAC;;;AAGhB,wBAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,UAAW,KAAK,EAAG;AAClD,YAAM,CAAE,KAAK,CAAG,IAAI,CAAE,CAAE,GAAG,KAAK,CAAC;KAClC,CAAC,CAAC;;AAEH,QAAI,OAAO,GAAG,IAAI,CAAC;;;AAGnB,WAAO,oBAAE,GAAG,CAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAE,EAAE;AAC1C,aAAO,EAAE,CAAC;KACX;;AAED,WAAO,OAAO,CAAC;GAEhB;;AAED,aAAW,EAAE,uBAAW;AACtB,4CAAiB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAE,CAAC;GACjF;CACJ,CAAC","file":"app/jsx/components/mixins/groupMixins.jsx","sourcesContent":["// Group Editing Mixins\n// ====================\n// Groups-specific shared editing functions.\n// TODO: Move anything in this and usersMixins that can be shared outside of the\n// Accounts view into a more general mixin.\n\n\"use strict\";\n\nimport _ from \"lodash\";\n\nimport GroupsStore from \"../../stores/GroupsStore\";\nimport GroupsMiddleware from \"../../middleware/GroupsMiddleware\";\n\nmodule.exports = {\n\n    componentDidMount: function (){\n      GroupsStore.addChangeListener(this.updateGroupsListInState);\n    }\n\n  , componentWillUnMount: function () {\n      GroupsStore.removeChangeListener(this.updateGroupsListInState);\n    }\n\n  , updateGroupsListInState: function (){\n      var groupsList = GroupsStore.getAllGroups();\n      this.setState({ groupsList: groupsList});\n    }\n\n    // Will return the first available GID above 1000 (to be used as a default).\n  , getNextGID: function () {\n      var groups = {};\n\n      // Turn the array of groups into an object for easier GID checking.\n      _.forEach(this.state.groupsList, function ( group ) {\n        groups[ group [ \"id\" ] ] = group;\n      });\n\n      var nextGID = 1000;\n\n      // loop until it finds a GID that's not in use\n      while( _.has( groups, nextGID.toString() ) ){\n        nextGID++;\n      }\n\n      return nextGID;\n\n    }\n\n  , deleteGroup: function (){\n      GroupsMiddleware.deleteGroup(this.props.item[\"id\"], this.returnToViewerRoot() );\n    }\n};"]}
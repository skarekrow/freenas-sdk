{"version":3,"sources":["app/jsx/components/mixins/viewerCommon.jsx"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;sBAEC,QAAQ;;;;AAEtB,MAAM,CAAC,OAAO,GAAG;;AAEb,cAAY,EAAE,wBAAY;AACxB,QAAK,oBAAE,QAAQ,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAE,EAAG;AACnG,aAAO,IAAI,CAAC;KACb,MAAM;AACL,aAAO,KAAK,CAAC;KACd;GAEF;;AAED,qBAAmB,EAAE,+BAAY;AAC/B,QAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAE,EAAG;AACjF,aAAO,IAAI,CAAC;KACb,MAAM;AACL,aAAO,KAAK,CAAC;KACd;GACF;;AAED,oBAAkB,EAAE,8BAAY;AAC9B,QAAK,IAAI,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,mBAAmB,EAAE,EAAG;AACpD,UAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;AAC3D,UAAI,YAAY,GAAG,oBAAE,SAAS,CAAE,aAAa,EAAE,UAAU,SAAS,EAAG;AACnE,eAAO,oBAAE,QAAQ,CAAE,SAAS,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAE,CAAC;OACjF,EAAE,IAAI,CAAE,CAAC;;AAEV,UAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAE,aAAa,CAAE,YAAY,GAAG,CAAC,CAAE,CAAC,MAAM,CAAC,CAAE,CAAC;KAC/E;GACF;;AAED,eAAa,EAAE,yBAAY;AACzB,QAAK,IAAI,EAAG,EAEX,MAAM;AACL,aAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AACrC,UAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;GACF;;CAEJ,CAAC","file":"app/jsx/components/mixins/viewerCommon.jsx","sourcesContent":["// COMMON VIEWER MODE MIXIN\n// ========================\n// This mixin contains useful methods that apply to cross-cutting concerns in\n// the various different viewer modes.\n\n\"use strict\";\n\nimport _ from \"lodash\";\n\nmodule.exports = {\n\n    addingEntity: function () {\n      if ( _.endsWith( this.context.router.getCurrentPathname(), this.props.viewData.routing.addentity ) ) {\n        return true;\n      } else {\n        return false;\n      }\n\n    }\n\n  , dynamicPathIsActive: function () {\n      if ( this.context.router.getCurrentParams()[ this.props.viewData.routing.param ] ) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  , returnToViewerRoot: function () {\n      if ( this.isMounted() && this.dynamicPathIsActive() ) {\n        var currentRoutes = this.context.router.getCurrentRoutes();\n        var currentIndex = _.findIndex( currentRoutes, function( routeData ) {\n          return _.contains( routeData[\"paramNames\"], this.props.viewData.routing.param );\n        }, this );\n\n        this.context.router.transitionTo( currentRoutes[ currentIndex - 1 ][\"path\"] );\n      }\n    }\n\n  , tryPathChange: function () {\n      if ( true ) {\n\n      } else {\n        console.log(\"couldn't do the thing\");\n        this.returnToViewerRoot();\n      }\n    }\n\n};\n"]}
{"version":3,"sources":["app/jsx/common/DebugLogger.js"],"names":[],"mappings":"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","file":"app/jsx/common/DebugLogger.js","sourcesContent":["// DEBUG LOGGER\n// ============\n// A helper class with simple methods for logging debug output to the console.\n\n\"use strict\";\n\nimport _ from \"lodash\";\n\nconst DEBUGCSS =\n  { uuid: \"color: rgb(33, 114, 218);\"\n  , args: \"color: rgb(215, 110, 20); font-style: italic;\"\n  , error: \"color: rgb(235, 15, 15);\"\n  , code: \"color: rgb(62, 28, 86);\"\n  , normal: \"\"\n  };\n\nclass DebugLogger {\n\n  constructor ( namespace, defaultType ) {\n    this.namespace = namespace || null;\n    this.defaultType = defaultType || \"log\";\n    this.DEBUGCSS = DEBUGCSS;\n  }\n\n  reports ( flag ) {\n    if ( typeof window && window.DEBUG_FLAGS ) {\n      if ( this.namespace && window.DEBUG_FLAGS[ this.namespace ] ) {\n        return Boolean( window.DEBUG_FLAGS[ this.namespace ][ flag ] );\n      } else {\n        return Boolean( window.DEBUG_FLAGS[ flag ] );\n      }\n    }\n\n    return false;\n  }\n\n  formatOutput ( contents, css ) {\n    let output = [];\n\n    if ( contents && contents.length ) {\n      if ( _.isArray( contents ) ) {\n\n        output = output.concat( contents );\n\n      } else if ( _.isString( contents ) ) {\n\n        output.push( contents );\n\n      }\n    }\n\n    if ( css && css.length ) {\n      if ( _.isArray( css ) && css.length ) {\n\n        output = output.concat( css.map( style => this.DEBUGCSS[ style ] ) );\n\n      } else if ( _.isString( css ) && this.DEBUGCSS[ css ] ) {\n\n        output.push( this.DEBUGCSS[ css ] )\n\n      }\n    }\n\n    return output;\n  }\n\n  write ( type, contents, css ) {\n    if ( contents ) {\n      switch ( type ) {\n        case \"dir\":\n        case \"error\":\n        case \"info\":\n        case \"log\":\n        case \"table\":\n        case \"trace\":\n        case \"warn\":\n          console[ type ]( ...this.formatOutput( contents, css ) );\n          break;\n\n        default:\n          console.log( ...this.formatOutput( contents, css ) );\n          break;\n      }\n    }\n  }\n\n  // Shortcut methods aliasing write(). Reduces clutter in calls.\n  dir () {\n    this.write( \"dir\", ...arguments )\n  }\n  error () {\n    this.write( \"error\", ...arguments )\n  }\n  info () {\n    this.write( \"info\", ...arguments )\n  }\n  log () {\n    this.write( \"log\", ...arguments )\n  }\n  table () {\n    this.write( \"table\", ...arguments )\n  }\n  trace () {\n    this.write( \"trace\", ...arguments )\n  }\n  warn () {\n    this.write( \"warn\", ...arguments )\n  }\n\n  group ( type, flag, heading, contents, css ) {\n\n  }\n\n};\n\nexport default DebugLogger;\n"]}
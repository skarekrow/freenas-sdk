{"version":3,"sources":["app/jsx/middleware/TasksMiddleware.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;;;;;;;;;;;gCAEE,oBAAoB;;;;kCACV,sBAAsB;;;;;;;IAKzC,eAAe;WAAf,eAAe;0BAAf,eAAe;;;;;;;YAAf,eAAe;;eAAf,eAAe;;WAEY,iCAAE,QAAQ,EAAE,MAAM,EAAG;;;AAGlD,aAAO,8BAAG,OAAO,CAAE,YAAY,EACZ,CAAE,CAAC,CAAE,OAAO,EAAE,GAAG,EAAE,yBAAyB,CAAE,CAAC,EAC7C,EAAE,MAAM,EAAI,MAAM,IAAI,CAAC,AAAE;AACvB,aAAK,EAAE,GAAG;AACV,YAAI,EAAE,IAAI;AACV,WAAG,EAAE,MAAM;OACZ,CACF,EACD,QAAQ,CACT,CAAC;KACpB;;;WAEgB,mBAAE,MAAM,EAAG;AAC1B,oCAAG,OAAO,CAAE,YAAY,EAAE,CAAE,QAAQ,CAAE,MAAM,EAAE,EAAE,CAAE,CAAE,CAAE,CAAC;KACxD;;;SAnBG,eAAe;;;AAqBpB,CAAC;;qBAEa,eAAe","file":"app/jsx/middleware/TasksMiddleware.js","sourcesContent":["// Users Middleware\n// ================\n// Handle the lifecycle and event hooks for the Users channel of the middleware\n\n\"use strict\";\n\nimport MC from \"./MiddlewareClient\";\nimport AbstractBase from \"./MiddlewareAbstract\";\n\n// There are no subscribe or unsubscribe functions here, because task\n// subscription can be handled directly through the Middleware Client.\n\nclass TasksMiddleware extends AbstractBase {\n\n  static getCompletedTaskHistory ( callback, offset ) {\n    // TODO: This MUST go through the Flux pattern, and needs to be limited\n    // by the value set in StoreLimits\n    return MC.request( \"task.query\"\n                     , [ [[ \"state\", \"~\", \"FINISHED|ABORTED|FAILED\" ]]\n                       , { offset: ( offset || 0 )\n                         , limit: 100\n                         , sort: \"id\"\n                         , dir: \"desc\"\n                         }\n                       ]\n                     , callback\n                     );\n  }\n\n  static abortTask ( taskID ) {\n    MC.request( \"task.abort\", [ parseInt( taskID, 10 ) ] );\n  }\n\n};\n\nexport default TasksMiddleware;\n"]}
{"version":3,"sources":["app/jsx/middleware/MiddlewareClient.js"],"names":[],"mappings":"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","file":"app/jsx/middleware/MiddlewareClient.js","sourcesContent":["// Webapp Middleware\n// =================\n// Handles the lifecycle for the websocket connection to the middleware. This is\n// a utility class designed to curate general system data, including user login,\n// task and event queues, disconnects, and similar events. Calling action\n// creators or passing data to specific \"channel\" stores is out of scope for\n// this class.\n\n\"use strict\";\n\nimport _ from \"lodash\";\n\nimport WebSocketClient\n  from \"../common/WebSocketClient\";\nimport freeNASUtil\n  from \"../common/freeNASUtil\";\nimport MCD\n  from \"./MiddlewareClientDebug\";\n\nimport SubscriptionsStore\n  from \"../stores/SubscriptionsStore\";\nimport SubscriptionsActionCreators\n  from \"../actions/SubscriptionsActionCreators\";\n\nimport MiddlewareStore\n  from \"../stores/MiddlewareStore\";\nimport MiddlewareActionCreators\n  from \"../actions/MiddlewareActionCreators\";\n\nimport SessionStore\n  from \"../stores/SessionStore\";\n\nimport sessionCookies\n  from \"./cookies\";\n\n\nconst defaultTimeoutDelay = 10000;\n\nclass MiddlewareClient extends WebSocketClient {\n\n  constructor () {\n    super();\n    this.reconnectHandle.setUpdateFunc( function ( time ) {\n      MiddlewareActionCreators.updateReconnectTime( time );\n    } );\n    // this.logout = this.logout.bind( this );\n    this.queuedLogin = null;\n    this.queuedActions = [];\n    this.pendingRequests = {};\n\n    // On a successful login, dequeue any actions which may have been requested\n    // either before the connection was made, or before the authentication was\n    // complete.\n    SessionStore.addChangeListener( this.dequeueActions.bind( this ) );\n  }\n\n\n  // WEBSOCKET DATA HANDLERS\n  // Instance methods for handling data from the WebSocket connection. These are\n  // inherited from the WebSocketClient base class, which implements core\n  // functionality.\n\n  // Triggered by the WebSocket's onopen event.\n  handleOpen () {\n    super.handleOpen();\n\n    // Dispatch message stating that we have just connected\n    MiddlewareActionCreators.updateSocketState( \"connected\" );\n\n    // Re-subscribe to any namespaces that may have been active during the\n    // session. On the first login, this will do nothing.\n    this.renewSubscriptions();\n\n    if ( SessionStore.getLoginStatus() === false ) {\n      if ( sessionCookies.obtain( \"auth\" ) !== null ) {\n        // If our cookies contain a usable auth token, attempt a login\n        this.login( \"token\", sessionCookies.obtain( \"auth\" ) );\n      } else if ( this.queuedLogin ) {\n        // If the connection opens and we aren't authenticated, but we have a\n        // queued login, dispatch the login and reset its variable.\n        this.logPendingRequest( this.queuedLogin.id\n                              , this.queuedLogin.successCallback\n                              , this.queuedLogin.errorCallback\n                              , null\n                              );\n        this.socket.send( this.queuedLogin.action );\n        this.queuedLogin = null;\n\n        if ( MCD.reports( \"queues\" ) ) {\n          MCD.info( `Resolving queued login %c${ this.queuedLogin.id }`\n                  , [ \"uuid\" ]\n                  );\n          MCD.dir( this.queuedLogin.action );\n        }\n      }\n    } else {\n      MiddlewareActionCreators.receiveAuthenticationChange( \"\", false );\n    }\n  }\n\n  // Triggered by the WebSocket's `onclose` event. Performs any cleanup\n  // necessary to allow for a clean session end and prepares for a new session.\n  handleClose () {\n    super.handleClose();\n    this.queuedLogin = null;\n    this.queuedActions = [];\n\n    if ( MCD.reports( \"connection\" ) ) {\n      MCD.info( \"WebSocket connection closed\" );\n    }\n\n    // Dispatch logout status\n    MiddlewareActionCreators.receiveAuthenticationChange( \"\", false );\n    MiddlewareActionCreators.updateSocketState( \"disconnected\" );\n  }\n\n  // Triggered by the WebSocket's `onmessage` event. Parses the JSON from the\n  // middleware's response, and then performs followup tasks depending on the\n  // message's namespace.\n  handleMessage ( message ) {\n    super.handleMessage();\n    let data;\n    try {\n      data = JSON.parse( message.data );\n    } catch ( error ) {\n      MCD.error( [ \"Could not parse JSON from message:\", message ] );\n      return false;\n    }\n\n    if ( MCD.reports( \"messages\" ) ) {\n      MCD.info( [ \"Message from Middleware:\", data.namespace, message ] );\n    }\n\n    switch ( data.namespace ) {\n\n      // A FreeNAS event has occurred\n      case \"events\":\n        if ( MCD.reports( \"messages\" ) ) {\n          MCD.log( \"Message contained event data\" );\n        }\n        MiddlewareActionCreators.receiveEventData( data );\n        break;\n\n      // An RPC call is returning a response\n      case \"rpc\":\n        switch ( data.name ) {\n          case \"response\":\n            this.resolvePendingRequest( data.id, data.args, \"success\" );\n            break;\n\n          case \"error\":\n            this.resolvePendingRequest( data.id, data.args, \"error\" );\n            break;\n\n          default:\n            MCD.warn( \"Was sent an rpc message from middleware, the client \" +\n                      \"was unable to identify its purpose:\" );\n            MCD.log( message );\n            break;\n        }\n        break;\n\n      // There was an error with a request or with its execution on FreeNAS\n      case \"error\":\n        if ( MCD.reports( \"messages\" ) ) {\n          MCD.error( [ \"Middleware has indicated an error:\", data.args ] );\n        }\n        break;\n\n      // A reply was sent from the middleware with no recognizable namespace\n      // This shouldn't happen, and probably indicates a problem with the\n      // middleware itself.\n      default:\n        MCD.warn( \"Spurious reply from Middleware:\", message );\n        break;\n    }\n  };\n\n  // CONNECTION ERRORS\n  // Triggered by the WebSocket's `onerror` event. Handles errors\n  // With the client connection to the middleware.\n  handleError ( error ) {\n    super.handleError();\n    if ( MCD.reports( \"connection\" ) ) {\n      MCD.error( \"The WebSocket connection to the Middleware encountered \" +\n                 \"an error:\"\n               , [ \"error\" ]\n               );\n    }\n  };\n\n  // REQUEST TIMEOUTS\n  // Called by a request function without a matching response. Automatically\n  // triggers resolution of the request with a \"timeout\" status.\n  handleTimeout ( reqID ) {\n\n    if ( MCD.reports( \"messages\" ) ) {\n      MCD.warn( `Request %c'${ reqID }'%c timed out without a response from ` +\n                `the middleware`\n              , [ \"uuid\", \"normal\" ]\n              );\n    }\n\n    this.resolvePendingRequest( reqID, null, \"timeout\" );\n  };\n\n  // DATA AND REQUEST HANDLING\n\n  // Creates a JSON-formatted object to send to the middleware. Contains the\n  // following key-values:\n  // \"namespace\": The target middleware namespace. (eg. \"rpc\", \"events\")\n  // \"name\": Name of middleware action within the namespace\n  //         (eg. \"subscribe\", \"auth\")\n  // \"args\": The arguments to be used by the middleware action\n  //         (eg. username and password)\n  // \"id\": The unique UUID used to identify the origin and response If left\n  //       blank, `generateUUID` will be called. This is a fallback, and will\n  //       likely result in a \"Spurious reply\" error\n  pack ( namespace, name, args, id ) {\n    if ( MCD.reports( \"packing\" ) ) { MCD.logPack( ...arguments ); }\n\n    return JSON.stringify(\n      { namespace: namespace\n      , name: name\n      , id: id\n      , args: args\n      }\n    );\n\n  }\n\n  // Based on the status of the WebSocket connection and the authentication\n  // state, either logs and sends an action, or enqueues it until it can be sent\n  processNewRequest ( action, onSuccess, onError, id, timeout ) {\n    if ( this.socket ) {\n      if ( this.socket.readyState === 1 && SessionStore.getLoginStatus() ) {\n\n        if ( MCD.reports( \"logging\" ) ) {\n          MCD.info( `Logging and sending request %c'${ id }'`\n                  , [ \"uuid\" ]\n                  );\n          MCD.dir( action )\n        }\n\n        this.logPendingRequest( id, onSuccess, onError, action, timeout );\n        this.socket.send( action );\n\n      } else {\n\n        if ( MCD.reports( \"queues\" ) ) {\n          MCD.info( `Enqueueing request %c'${ id }'`, [ \"uuid\" ] );\n        }\n\n        this.queuedActions.push(\n          { action: action\n          , id: id\n          , successCallback: onSuccess\n          , errorCallback: onError\n          , timeout: timeout\n          }\n        );\n\n      }\n    } else {\n      MCD.error(\n        \"Tried to process a request without an active WebSocket connection\"\n      );\n    }\n\n  }\n\n  // Many views' lifecycle will make a request before the connection is made,\n  // and before the login credentials have been accepted. These requests are\n  // enqueued by the `login` and `request` functions into the `queuedActions`\n  // object and `queuedLogin`, and then are dequeued by this function.\n  dequeueActions () {\n\n    if ( MCD.reports( \"queues\" ) && this.queuedActions.length ) {\n      MCD.log( \"Attempting to dequeue actions\" );\n    }\n\n    if ( SessionStore.getLoginStatus() ) {\n      while ( this.queuedActions.length ) {\n        let request = this.queuedActions.shift();\n\n        if ( MCD.reports( \"queues\" ) ) {\n          MCD.log( `Dequeueing %c'${ request.id }'`, [ \"uuid\" ] );\n        }\n\n        this.processNewRequest( request.action\n                              , request.successCallback\n                              , request.errorCallback\n                              , request.id\n                              , request.timeout\n                              );\n      }\n    } else if ( MCD.reports( \"queues\" ) && this.queuedActions.length ) {\n      MCD.info( \"Cannot dequeue actions: Client is not authenticated\" );\n    }\n  }\n\n  // Records a middleware request that was sent to the server, stored in the\n  // constructor's `pendingRequests` object. These are eventually resolved and\n  // removed, either by a response from the server, or the timeout set here.\n  // If `timeoutDelay` is provided, its value will be used for the timeout.\n  // Otherwise, the default timeout (10s) is used.\n  logPendingRequest ( reqID, onSuccess, onError, origReq, timeoutDelay ) {\n\n    const delay = timeoutDelay || defaultTimeoutDelay;\n\n    function requestTimeoutHandler () {\n      this.handleTimeout( reqID );\n    };\n\n    // const newRequest =\n    this.pendingRequests[ reqID ] =\n      { successCallback: onSuccess\n      , errorCallback: onError\n      , origReq: origReq\n      , timeout: setTimeout( requestTimeoutHandler.bind( this ), delay )\n      };\n\n    // this.pendingRequests[ reqID ] = newRequest;\n\n\n    if ( MCD.reports( \"logging\" ) ) {\n      MCD.info( \"Current pending requests:\" );\n      MCD.dir( this.pendingRequests );\n    }\n  }\n\n  // Resolve a middleware request by clearing its timeout, and optionally\n  // calling its callback. Callbacks should not be called if the function timed\n  // out before a response was received.\n  resolvePendingRequest ( reqID, args, outcome ) {\n\n    // The server side dispatcher will send a None in the reqID when returing\n    // error (code 22): 'Request is not valid JSON'\n    if ( reqID && this.pendingRequests[ reqID ] ) {\n      clearTimeout( this.pendingRequests[ reqID ].timeout );\n    }\n\n    switch ( outcome ) {\n      case \"success\":\n        if ( MCD.reports( \"messages\" ) ) {\n          MCD.info( `SUCCESS: Resolving request %c'${ reqID }'`, [ \"uuid\" ] );\n        }\n        this.executeRequestSuccessCallback( reqID, args );\n        break;\n\n      case \"error\":\n        let origReq;\n\n        try {\n          origReq = JSON.parse( this.pendingRequests[ reqID ][\"origReq\"] );\n        } catch ( err ) {\n          MCD.error( [ `Could not parse JSON from request %c'${ reqID }'`\n                     , this.pendingRequests[ reqID ][\"origReq\"]\n                     ]\n                   , [ \"uuid\" ]\n                   );\n        }\n\n        this.executeRequestErrorCallback( reqID, args );\n\n        if ( args.message && _.startsWith( args.message, \"Traceback\" ) ) {\n          MCD.logPythonTraceback( reqID, args, origReq );\n        } else if ( args.code && args.message ) {\n          MCD.logErrorWithCode( reqID, args, origReq );\n        } else {\n          MCD.logErrorResponse( reqID, args, origReq );\n        }\n        break;\n\n      case \"timeout\":\n        if ( MCD.reports( \"messages\" ) ) {\n          MCD.warn( `TIMEOUT: Stopped waiting for request %c'${ reqID }'`\n                  , [ \"uuid\" ]\n                  );\n        }\n        this.executeRequestErrorCallback( reqID, args );\n        break;\n\n      default:\n        break;\n    }\n\n    delete this.pendingRequests[ reqID ];\n  }\n\n  // Executes the specified request's successCallback with the provided\n  // arguments. Should only be used in cases where a response has come from the\n  // server, and the status is successful in one way or another. Calling this\n  // function when the server returns an error could cause strange results.\n  // Use the errorCallback for that case.\n  executeRequestSuccessCallback ( reqID, args ) {\n    if ( _.isFunction( this.pendingRequests[ reqID ].successCallback ) ) {\n      this.pendingRequests[ reqID ].successCallback( args );\n    }\n  }\n\n  executeRequestErrorCallback ( reqID, args ) {\n    if ( _.isFunction( this.pendingRequests[ reqID ].errorCallback ) ) {\n      this.pendingRequests[ reqID ].errorCallback( args );\n    }\n  }\n\n  // Authenticate a user to the middleware. Basically a specialized version of\n  // the `request` function with a different payload.\n  login ( authType, credentials ) {\n    let reqID = freeNASUtil.generateUUID();\n    let rpcName = \"auth\";\n    let payload;\n\n    if ( authType === \"userpass\" ) {\n      payload = { username : credentials[0]\n                , password : credentials[1]\n                };\n    } else if ( authType === \"token\" ) {\n      payload = { token: credentials };\n      rpcName = rpcName + \"_token\";\n    }\n\n    const onSuccess = function ( response ) {\n      // Making a Cookie for token based login for the next time\n      // and setting its max-age to the TTL (in seconds) specified by the\n      // middleware response. The token value is stored in the Cookie.\n      sessionCookies.add( \"auth\", response[0], response[1] );\n      MiddlewareActionCreators.receiveAuthenticationChange( response[2], true );\n    };\n\n    const onError = function ( args ) {\n      // TODO: Make LoginBox aware of a failed user/pass error.\n      MiddlewareActionCreators.receiveAuthenticationChange( \"\", false );\n    };\n\n    const action = this.pack( \"rpc\", rpcName, payload, reqID );\n\n    if ( this.socket.readyState === 1 ) {\n\n      if ( MCD.reports( \"authentication\" ) ) {\n        MCD.info( \"Socket is ready: Sending login request.\" );\n      }\n\n      this.logPendingRequest( reqID, onSuccess, onError, action, null );\n      this.socket.send( action );\n\n    } else {\n\n      if ( MCD.reports( \"authentication\" ) ) {\n        MCD.info( \"Socket is not ready: Deferring login request.\" );\n      }\n\n      this.queuedLogin = { action: action\n                         , successCallback: onSuccess\n                         , errorCallback: onerror\n                         , id: reqID\n                         };\n    }\n\n  }\n\n  logout () {\n    // Deletes the login cookie (which contains the token) and closes the socket\n    // connection. `handleClose` is triggered, and the reconnect process begins.\n    // For socket close codes (and why 1000 is used here) see the RFC:\n    // https://tools.ietf.org/html/rfc6455#page-64\n    sessionCookies.delete( \"auth\" );\n    this.disconnect( 1000, \"User logged out\" );\n  }\n\n\n  // CHANNELS AND REQUESTS\n  // Make a request to the middleware, which translates to an RPC call. A\n  // unique UUID is generated for each request, and is supplied to\n  // `this.logPendingRequest` as a lookup key for resolving or timing out the\n  // Request.\n  request ( method, args, onSuccess, onError, timeoutDelay ) {\n    var reqID = freeNASUtil.generateUUID();\n    var payload = { method : method\n                  , args   : args\n                  };\n    var packedAction = this.pack( \"rpc\", \"call\", payload, reqID );\n\n    this.processNewRequest( packedAction\n                          , onSuccess\n                          , onError\n                          , reqID\n                          , timeoutDelay\n                          );\n  }\n\n\n  // SUBSCRIPTION INTERFACES\n  // Generic interface for subscribing to Middleware namespaces. The Middleware\n  // Flux store records the number of React components which have required a\n  // subscription to a Middleware namespace. This allows the Middleware Client\n  // to make intelligent decisions about whether to query a namespace for fresh\n  // data, begin or end a subscription, or even garbage collect a Flux store\n  // which is no longer being used.\n\n  subscribe ( masks, componentID ) {\n\n    if ( !_.isArray( masks ) ) {\n      MCD.error( \"The first argument in MiddlewareClient.subscribe() must \" +\n                 \"be an array of FreeNAS RPC namespaces.\"\n                 );\n      return false;\n    }\n\n    if ( !_.isString( componentID ) ) {\n      MCD.error( \"The second argument in MiddlewareClient.subscribe() must \" +\n                 \"be a string (usually the name of the React component \" +\n                 \"calling it).\"\n                 );\n      return false;\n    }\n\n    if ( MCD.reports( \"subscriptions\" ) ) {\n      MCD.logNewSubscriptionMasks( masks );\n    }\n\n    _.forEach( masks, function ( mask ) {\n      let subCount = SubscriptionsStore.getNumberOfSubscriptionsForMask( mask );\n\n      if ( MCD.reports( \"subscriptions\" ) ) {\n        MCD.logSubscription( subCount, mask );\n      }\n\n      if ( subCount < 1 ) {\n        const reqID = freeNASUtil.generateUUID();\n        const action = this.pack( \"events\", \"subscribe\", [ mask ], reqID );\n\n        this.processNewRequest( action, null, null, reqID, null );\n      }\n    }, this );\n\n    SubscriptionsActionCreators.recordNewSubscriptions( masks, componentID );\n  }\n\n  unsubscribe ( masks, componentID ) {\n\n    if ( !_.isArray( masks ) ) {\n      MCD.warn( \"The first argument in MiddlewareClient.unsubscribe() must \" +\n                \"be an array of FreeNAS RPC namespaces.\"\n              );\n      return;\n    }\n\n    if ( !_.isString( componentID ) ) {\n      MCD.warn( \"The second argument in MiddlewareClient.unsubscribe() must \" +\n                \"be a string (usually the name of the React component \" +\n                \"calling it).\"\n              );\n      return;\n    }\n\n    if ( MCD.reports( \"subscriptions\" ) ) {\n      MCD.logUnsubscribeMasks( masks );\n    }\n\n    _.forEach( masks, function ( mask ) {\n      let subCount = SubscriptionsStore.getNumberOfSubscriptionsForMask( mask );\n\n      if ( subCount === 1 ) {\n        const reqID = freeNASUtil.generateUUID();\n        const action = this.pack( \"events\", \"unsubscribe\", [ mask ], reqID );\n\n        this.processNewRequest( action, null, null, reqID, null );\n      }\n    }, this );\n\n    SubscriptionsActionCreators.deleteCurrentSubscriptions( masks\n                                                          , componentID\n                                                          );\n  }\n\n  renewSubscriptions () {\n    const masks = _.keys( SubscriptionsStore.getAllSubscriptions() );\n    _.forEach( masks, function ( mask ) {\n      if ( MCD.reports( \"subscriptions\" ) ) {\n        MCD.log( `Renewing subscription request for %c'${ mask }' `\n               , [ \"args\", \"normal\" ]\n               );\n      }\n\n      const reqID = freeNASUtil.generateUUID();\n      const action = this.pack( \"events\", \"subscribe\", [ mask ], reqID );\n\n      this.processNewRequest( action, null, null, reqID, null );\n    }, this );\n  }\n\n  unsubscribeALL () {\n    const masks = _.keys( SubscriptionsStore.getAllSubscriptions() );\n    _.forEach( masks, function ( mask ) {\n      if ( MCD.reports( \"subscriptions\" ) ) {\n        MCD.log( `Requested: Unsubscribe to %c'${ mask }'%c events`\n               , [ \"args\", \"normal\" ]\n               );\n      }\n\n      const reqID = freeNASUtil.generateUUID();\n      const action = this.pack( \"events\", \"unsubscribe\", [ mask ], reqID );\n\n      this.processNewRequest( action, null, null, reqID, null );\n    }, this );\n\n    SubscriptionsActionCreators.deleteAllSubscriptions();\n  }\n\n  // MIDDLEWARE DISCOVERY METHODS\n  // These are instance methods used to request information about the\n  // Middleware server's capabilities and overall state. These can be used to\n  // return a list of services supported by your connection to the middleware,\n  // and methods supported by each service.\n\n  getServices () {\n    this.request( \"discovery.get_services\", [], function ( services ) {\n      MiddlewareActionCreators.receiveAvailableServices( services );\n    });\n  };\n\n  getMethods ( service ) {\n    this.request( \"discovery.get_methods\", [ service ], function ( methods ) {\n      MiddlewareActionCreators.receiveAvailableServiceMethods( service\n                                                             , methods\n                                                             );\n    });\n  };\n\n}\n\nexport default new MiddlewareClient();\n"]}
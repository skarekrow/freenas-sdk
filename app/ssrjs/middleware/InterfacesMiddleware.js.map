{"version":3,"sources":["app/jsx/middleware/InterfacesMiddleware.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;;;;;;;;;;;gCAEE,oBAAoB;;;;kCACV,sBAAsB;;;;+CAE/B,qCAAqC;;;;IAE/C,oBAAoB;WAApB,oBAAoB;0BAApB,oBAAoB;;;;;;;YAApB,oBAAoB;;eAApB,oBAAoB;;WAEP,mBAAE,WAAW,EAAG;AAC/B,oCAAG,SAAS,CAAE,CAAE,qBAAqB,CAAE,EAAE,WAAW,CAAE,CAAC;AACvD,oCAAG,SAAS,CAAE,CAAE,QAAQ,CAAE,EAAE,WAAW,CAAE,CAAC;KAC3C;;;WAEkB,qBAAE,WAAW,EAAG;AACjC,oCAAG,WAAW,CAAE,CAAE,qBAAqB,CAAE,EAAE,WAAW,CAAE,CAAC;AACzD,oCAAG,WAAW,CAAE,CAAE,QAAQ,CAAE,EAAE,WAAW,CAAE,CAAC;KAC7C;;;WAE4B,iCAAG;AAC5B,oCAAG,OAAO,CAAE,0BAA0B,EAC1B,EAAE,EACF,SAAS,2BAA2B,CAAG,iBAAiB,EAAG;AACzD,qDAAI,qBAAqB,CAAE,iBAAiB,CAAE,CAAC;OAChD,CACF,CAAC;KACb;;;WAEuB,4BAAE,aAAa,EAAE,KAAK,EAAG;AACjD,oCAAG,OAAO,CAAE,aAAa,EACb,CAAE,6BAA6B,EAAE,CAAE,aAAa,EAAE,KAAK,CAAE,CAAE,EAC3D,SAAS,wBAAwB,CAAG,MAAM,EAAE,aAAa,EAAG;AAC1D,qDAAI,6BAA6B,CAAE,MAAM,EAAE,aAAa,CAAE,CAAC;OAC5D,CACF,CAAC;KACb;;;SA5BG,oBAAoB;;;AA8BzB,CAAC;;qBAEa,oBAAoB","file":"app/jsx/middleware/InterfacesMiddleware.js","sourcesContent":["// Interfaces Middleware\n// =====================\n\n\"use strict\";\n\nimport MC from \"./MiddlewareClient\";\nimport AbstractBase from \"./MiddlewareAbstract\";\n\nimport IAC from \"../actions/InterfacesActionCreators\";\n\nclass InterfacesMiddleware extends AbstractBase {\n\n  static subscribe ( componentID ) {\n    MC.subscribe( [ \"network.interface.*\" ], componentID );\n    MC.subscribe( [ \"task.*\" ], componentID );\n  }\n\n  static unsubscribe ( componentID ) {\n    MC.unsubscribe( [ \"network.interface.*\" ], componentID );\n    MC.unsubscribe( [ \"task.*\" ], componentID );\n  }\n\n  static requestInterfacesList () {\n      MC.request( \"network.interfaces.query\"\n                , []\n                , function handleRequestInterfacesList ( rawInterfacesList ) {\n                    IAC.receiveInterfacesList( rawInterfacesList );\n                  }\n                );\n    }\n\n  static configureInterface ( interfaceName, props ) {\n    MC.request( \"task.submit\"\n              , [ \"network.interface.configure\", [ interfaceName, props ] ]\n              , function handleConfigureInterface ( taskID, interfaceName ) {\n                  IAC.receiveInterfaceConfigureTask( taskID, interfaceName );\n                }\n              );\n  }\n\n};\n\nexport default InterfacesMiddleware;\n"]}